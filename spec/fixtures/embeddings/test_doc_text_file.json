[{"doc_id":0,"embedding":[-0.00804087,0.033974685,0.0011557381,-0.024480468,-0.005280244,0.01928056,0.00049388176],"document":"## Hnswlib.rb\n\nHnswlib.rb provides Ruby bindings for the Hnswlib that implements approximate nearest-neghbor search based on hierarchical navigable small world graphs.\n\n## hnswlib"},{"doc_id":1,"embedding":[-0.00804087,0.033974685,0.0011557381,-0.024480468,-0.005280244,0.01928056,0.00049388176],"document":"### Other implementations\n\nNon-metric space library (nmslib) - main library(python, C++), supports exotic distances: https://github.com/nmslib/nmslib"},{"doc_id":2,"embedding":[-0.00804087,0.033974685,0.0011557381,-0.024480468,-0.005280244,0.01928056,0.00049388176],"document":"- Can work with custom user defined distances (C++).\nSignificantly less memory footprint and faster build time compared to current nmslib's implementation.\n\n### properties"},{"doc_id":3,"embedding":[-0.00804087,0.033974685,0.0011557381,-0.024480468,-0.005280244,0.01928056,0.00049388176],"document":"- Has full support for incremental index construction and updating the elements. Has support for element deletions (by marking them in index). Index is picklable."},{"doc_id":4,"embedding":[-0.00804087,0.033974685,0.0011557381,-0.024480468,-0.005280244,0.01928056,0.00049388176],"document":"- Interfaces for C++, Python, external support for Java and R (https://github.com/jlmelville/rcpphnsw)."},{"doc_id":5,"embedding":[-0.00804087,0.033974685,0.0011557381,-0.024480468,-0.005280244,0.01928056,0.00049388176],"document":"Amazon PECOS https://github.com/amzn/pecos\nTOROS N2 (python, C++): https://github.com/kakao/n2\nOnline HNSW (C++): https://github.com/andrusha97/online-hnsw)"},{"doc_id":6,"embedding":[-0.00804087,0.033974685,0.0011557381,-0.024480468,-0.005280244,0.01928056,0.00049388176],"document":"CUDA implementation: https://github.com/js1010/cuhnsw\nRust implementation https://github.com/rust-cv/hnsw"},{"doc_id":7,"embedding":[-0.00804087,0.033974685,0.0011557381,-0.024480468,-0.005280244,0.01928056,0.00049388176],"document":"Code for the paper \"Revisiting the Inverted Indices for Billion-Scale Approximate Nearest Neighbors\" (current state-of-the-art in compressed indexes, C++): https://github.com/dbaranchuk/ivf-hnsw"},{"doc_id":8,"embedding":[-0.00804087,0.033974685,0.0011557381,-0.024480468,-0.005280244,0.01928056,0.00049388176],"document":"Faiss library by facebook, uses own HNSW implementation for coarse quantization (python, C++): https://github.com/facebookresearch/faiss"},{"doc_id":9,"embedding":[-0.00804087,0.033974685,0.0011557381,-0.024480468,-0.005280244,0.01928056,0.00049388176],"document":"Go implementation: https://github.com/Bithack/go-hnsw\nPython implementation (as a part of the clustering code by by Matteo Dell'Amico): https://github.com/matteodellamico/flexible-clustering"},{"doc_id":10,"embedding":[-0.00804087,0.033974685,0.0011557381,-0.024480468,-0.005280244,0.01928056,0.00049388176],"document":"Header-only C++ HNSW implementation with python bindings, insertions and updates.\n\n### Highlights\n\n- Lightweight, header-only, no dependencies other than C++ 11"},{"doc_id":11,"embedding":[-0.00804087,0.033974685,0.0011557381,-0.024480468,-0.005280244,0.01928056,0.00049388176],"document":"Java bindings using Java Native Access: https://github.com/stepstone-tech/hnswlib-jna\n.Net implementation: https://github.com/curiosity-ai/hnsw-sharp"},{"doc_id":12,"embedding":[-0.00804087,0.033974685,0.0011557381,-0.024480468,-0.005280244,0.01928056,0.00049388176],"document":"Julia implmentation https://github.com/JuliaNeighbors/HNSW.jl\nJava implementation: https://github.com/jelmerk/hnswlib"},{"doc_id":13,"embedding":[-0.00804087,0.033974685,0.0011557381,-0.024480468,-0.005280244,0.01928056,0.00049388176],"document":"Rust implementation for memory and thread safety purposes and There is A Trait to enable the user to implement its own distances. It takes as data slices of types T satisfying T:Serialize+Clone+Send+Sync.: https://github.com/jean-pierreBoth/hnswlib-rs"},{"doc_id":14,"embedding":[-0.00804087,0.033974685,0.0011557381,-0.024480468,-0.005280244,0.01928056,0.00049388176],"document":"space - name of the space (can be one of \"l2\", \"ip\", or \"cosine\").\ndim - dimensionality of the space.\nmax_elements - current capacity of the index. Equivalent to p.get_max_elements()."}]