---
http_interactions:
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"messages":[{"role":"user","content":"Answer the following questions
        as best you can. You have access to the following actions:\n\nSearch: useful
        for when you need to answer questions about current events.You should ask
        targeted questions\nCalculator: useful for when you need to answer questions
        about math\n\nUse the following format:\n\nQuestion: the input question you
        must answer\nThought: you should always think about what to do\nAction: the
        action to take, should be one of [Search, Calculator]\nAction Input: the input
        to the action\nObservation: the result of the action\n... (this Thought/Action/Action
        Input/Observation sequence can repeat N times)\nThought: I now know the final
        answer\nFinal Answer: the final answer to the original input question\nNext
        Actions: If you have them, up to three suggested actions for the user to take
        after getting this answer.\n\n\nBegin!\n\nQuestion: how many days in a year?\nThought:\n"}],"model":"gpt-3.5-turbo","temperature":0.7,"max_tokens":512,"stop":["\nObservation:
        "]}'
    headers:
      Content-Type:
      - application/json
      Authorization:
      - Bearer <openai_access_token>
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Tue, 07 Mar 2023 20:20:38 GMT
      Content-Type:
      - application/json
      Content-Length:
      - '383'
      Connection:
      - keep-alive
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - no-cache, must-revalidate
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - user-ri9zw9ahumb1bo9vs73mudbi
      Openai-Processing-Ms:
      - '1012'
      Openai-Version:
      - '2020-10-01'
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      X-Request-Id:
      - 412a0e67844fc14fa46e9991781d3e5f
    body:
      encoding: UTF-8
      string: '{"id":"chatcmpl-6rY5VqyldPR9cy31jG0Lv28X0XOuZ","object":"chat.completion","created":1678220437,"model":"gpt-3.5-turbo-0301","usage":{"prompt_tokens":190,"completion_tokens":23,"total_tokens":213},"choices":[{"message":{"role":"assistant","content":"This
        is a math question, so I should use the calculator.\nAction: Calculator\nAction
        Input: 365"},"finish_reason":"stop","index":0}]}

        '
  recorded_at: Tue, 07 Mar 2023 20:20:38 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"messages":[{"role":"user","content":"You are GPT-3, and you can''t
        do math.\nYou can do basic math, and your memorization abilities are impressive,
        but you can''t do any complex calculations that a human could not do in their
        head. You also have an annoying tendency to just make up highly specific,
        but wrong, answers.\nSo we hooked you up to a Ruby 3 kernel, and now you can
        execute code written in the Ruby programming language. If anyone gives you
        a hard math problem, just use this format and weâ€™ll take care of the rest:\n\nQuestion:
        ${{Question with hard calculation.}}\n```ruby\n${{Code that prints what you
        need to know}}\n```\n```output\n${{Output of your code}}\n```\nAnswer: ${{Answer}}\n\nOtherwise,
        use this simpler format:\n\nQuestion: ${{Question without hard calculation}}\nAnswer:
        ${{Answer}}\n\nBegin.\n\nQuestion: What is 37593 * 67?\n```ruby\nputs(37593
        * 67)\n```\n```output\n2518731\n```\nAnswer: 2518731\n\nQuestion: what is
        2518731 + 0?\nAnswer: 2518731\n\nQuestion: 365\n"}],"model":"gpt-3.5-turbo","temperature":0.7,"max_tokens":512,"stop":["```output"]}'
    headers:
      Content-Type:
      - application/json
      Authorization:
      - Bearer <openai_access_token>
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Tue, 07 Mar 2023 20:20:39 GMT
      Content-Type:
      - application/json
      Content-Length:
      - '359'
      Connection:
      - keep-alive
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - no-cache, must-revalidate
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - user-ri9zw9ahumb1bo9vs73mudbi
      Openai-Processing-Ms:
      - '755'
      Openai-Version:
      - '2020-10-01'
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      X-Request-Id:
      - 921c26ea7af3fe53a51581131f7d12ba
    body:
      encoding: UTF-8
      string: '{"id":"chatcmpl-6rY5XX5wRFvINyL6AKz7OUJzNAmKC","object":"chat.completion","created":1678220439,"model":"gpt-3.5-turbo-0301","usage":{"prompt_tokens":250,"completion_tokens":18,"total_tokens":268},"choices":[{"message":{"role":"assistant","content":"Answer:
        Sorry, that is not a question. Please provide a valid question."},"finish_reason":"stop","index":0}]}

        '
  recorded_at: Tue, 07 Mar 2023 20:20:39 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"messages":[{"role":"user","content":"Answer the following questions
        as best you can. You have access to the following actions:\n\nSearch: useful
        for when you need to answer questions about current events.You should ask
        targeted questions\nCalculator: useful for when you need to answer questions
        about math\n\nUse the following format:\n\nQuestion: the input question you
        must answer\nThought: you should always think about what to do\nAction: the
        action to take, should be one of [Search, Calculator]\nAction Input: the input
        to the action\nObservation: the result of the action\n... (this Thought/Action/Action
        Input/Observation sequence can repeat N times)\nThought: I now know the final
        answer\nFinal Answer: the final answer to the original input question\nNext
        Actions: If you have them, up to three suggested actions for the user to take
        after getting this answer.\n\n\nBegin!\n\nQuestion: how many days in a year?\nThought:
        This is a math question, so I should use the calculator.\nAction: Calculator\nAction
        Input: 365\nObservation: Answer: Sorry, that is not a question. Please provide
        a valid question.\nThought:\n"}],"model":"gpt-3.5-turbo","temperature":0.7,"max_tokens":512,"stop":["\nObservation:
        "]}'
    headers:
      Content-Type:
      - application/json
      Authorization:
      - Bearer <openai_access_token>
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Tue, 07 Mar 2023 20:20:41 GMT
      Content-Type:
      - application/json
      Content-Length:
      - '414'
      Connection:
      - keep-alive
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - no-cache, must-revalidate
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - user-ri9zw9ahumb1bo9vs73mudbi
      Openai-Processing-Ms:
      - '1432'
      Openai-Version:
      - '2020-10-01'
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      X-Request-Id:
      - 622fee3f4ec42084f33246f11216d2b2
    body:
      encoding: UTF-8
      string: '{"id":"chatcmpl-6rY5Y6trI15yhmgzrY8IoR37PKONV","object":"chat.completion","created":1678220440,"model":"gpt-3.5-turbo-0301","usage":{"prompt_tokens":234,"completion_tokens":32,"total_tokens":266},"choices":[{"message":{"role":"assistant","content":"Oops,
        I need to rephrase the question to make it a question.\nAction: Search\nAction
        Input: \"How many days are in a year?\"\n"},"finish_reason":"stop","index":0}]}

        '
  recorded_at: Tue, 07 Mar 2023 20:20:41 GMT
- request:
    method: get
    uri: https://serpapi.com/search?api_key=<SERPAPI_API_KEY>&engine=google&output=json&q=How%20many%20days%20are%20in%20a%20year?&source=ruby
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Tue, 07 Mar 2023 20:20:43 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Cf-Ray:
      - 7a458a60ca2dc7cd-DEN
      Cache-Control:
      - max-age=3600, public
      Etag:
      - W/"cf31657a54f1d3048ded81c9ee8a1a51"
      Vary:
      - Accept-Encoding
      Cf-Cache-Status:
      - MISS
      Referrer-Policy:
      - strict-origin-when-cross-origin
      Serpapi-Search-Id:
      - 64079c99f716eeee05df25ac
      X-Content-Type-Options:
      - nosniff
      X-Download-Options:
      - noopen
      X-Frame-Options:
      - SAMEORIGIN
      X-Permitted-Cross-Domain-Policies:
      - none
      X-Request-Id:
      - 964b4e91-4b84-4725-8beb-a5bdf27bb194
      X-Robots-Tag:
      - noindex, nofollow
      X-Runtime:
      - '1.870346'
      X-Xss-Protection:
      - 1; mode=block
      Server:
      - cloudflare
      Alt-Svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Tue, 07 Mar 2023 20:20:43 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"messages":[{"role":"user","content":"Answer the following questions
        as best you can. You have access to the following actions:\n\nSearch: useful
        for when you need to answer questions about current events.You should ask
        targeted questions\nCalculator: useful for when you need to answer questions
        about math\n\nUse the following format:\n\nQuestion: the input question you
        must answer\nThought: you should always think about what to do\nAction: the
        action to take, should be one of [Search, Calculator]\nAction Input: the input
        to the action\nObservation: the result of the action\n... (this Thought/Action/Action
        Input/Observation sequence can repeat N times)\nThought: I now know the final
        answer\nFinal Answer: the final answer to the original input question\nNext
        Actions: If you have them, up to three suggested actions for the user to take
        after getting this answer.\n\n\nBegin!\n\nQuestion: how many days in a year?\nThought:
        This is a math question, so I should use the calculator.\nAction: Calculator\nAction
        Input: 365\nObservation: Answer: Sorry, that is not a question. Please provide
        a valid question.\nThought: Oops, I need to rephrase the question to make
        it a question.\nAction: Search\nAction Input: \"How many days are in a year?\"\n\nObservation:
        365 days\nThought:\n"}],"model":"gpt-3.5-turbo","temperature":0.7,"max_tokens":512,"stop":["\nObservation:
        "]}'
    headers:
      Content-Type:
      - application/json
      Authorization:
      - Bearer <openai_access_token>
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Tue, 07 Mar 2023 20:20:45 GMT
      Content-Type:
      - application/json
      Content-Length:
      - '382'
      Connection:
      - keep-alive
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - no-cache, must-revalidate
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - user-ri9zw9ahumb1bo9vs73mudbi
      Openai-Processing-Ms:
      - '1121'
      Openai-Version:
      - '2020-10-01'
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      X-Request-Id:
      - eb4d38eaff5090cd51dafa49fedd740e
    body:
      encoding: UTF-8
      string: '{"id":"chatcmpl-6rY5c5GZVPKDbsBX1q0S3Y3mgZUB6","object":"chat.completion","created":1678220444,"model":"gpt-3.5-turbo-0301","usage":{"prompt_tokens":274,"completion_tokens":26,"total_tokens":300},"choices":[{"message":{"role":"assistant","content":"I
        now know the final answer.\nFinal Answer: There are 365 days in a year.\nNext
        Actions: None."},"finish_reason":"stop","index":0}]}

        '
  recorded_at: Tue, 07 Mar 2023 20:20:45 GMT
recorded_with: VCR 6.1.0
