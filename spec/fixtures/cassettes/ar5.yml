---
http_interactions:
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"messages":[{"role":"system","content":"You are a Ruby on Rails Active
        Record code generator"},{"role":"system","content":"Given an input question,
        first create a syntactically correct Rails Active Record code to run, then
        look at the results of the code and return the answer. Unless the user specifies
        in her question a specific number of examples she wishes to obtain, limit
        your code to at most 5 results.\nNever query for all the columns from a specific
        model, only ask for the relevant attributes given the question.\nAlso, pay
        attention to which attribute is in which model.\n\nUse the following format:\nQuestion:
        ${{Question here}}\nARChanges: ${{Active Record code to compute the number
        of records going to change}} - Only add this line if the ARCode on the next
        line will make data changes.\nARCode: ${{Active Record code to run}} - make
        sure you use valid code\nAnswer: ${{Final answer here}}\n\nOnly use the following
        Active Record models: [Comment(id: integer, content: text, user_id: integer,
        ticket_id: integer, created_at: datetime, updated_at: datetime), Ticket(id:
        integer, title: string, user_id: integer, status: integer, body: text, created_at:
        datetime, updated_at: datetime), User(id: integer, name: string, created_at:
        datetime, updated_at: datetime)]\nPay attention to use only the attribute
        names that you can see in the model description.\nDo not make up variable
        or attribute names, and do not share variables between the code in ARChanges
        and ARCode\nBe careful to not query for attributes that do not exist, and
        to use the format specified above.\nFinally, try not to use print or puts
        in your code"},{"role":"user","content":"Question: Move John''s open tickets
        to Sally"}],"model":"gpt-3.5-turbo","temperature":0.2,"max_tokens":512,"stop":["Answer:"]}'
    headers:
      Content-Type:
      - application/json
      Authorization:
      - Bearer <openai_access_token>
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Tue, 04 Apr 2023 00:21:28 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - no-cache, must-revalidate
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - user-ri9zw9ahumb1bo9vs73mudbi
      Openai-Processing-Ms:
      - '2021'
      Openai-Version:
      - '2020-10-01'
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Request-Id:
      - 8e359e87305ce97eae2d9dc3c3e9dbb9
      Cf-Cache-Status:
      - DYNAMIC
      Server:
      - cloudflare
      Cf-Ray:
      - 7b256427287a27d0-SLC
      Alt-Svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: '{"id":"chatcmpl-71OiMddybC0ykiKLrrcYT6qZT2Or6","object":"chat.completion","created":1680567686,"model":"gpt-3.5-turbo-0301","usage":{"prompt_tokens":366,"completion_tokens":53,"total_tokens":419},"choices":[{"message":{"role":"assistant","content":"ARChanges:
        `Ticket.where(user_id: john.id, status: ''open'').update_all(user_id: sally.id)`
        \nARCode: `Ticket.where(user_id: john.id, status: ''open'').update_all(user_id:
        sally.id)`\n"},"finish_reason":"stop","index":0}]}

        '
  recorded_at: Tue, 04 Apr 2023 00:21:28 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"messages":[{"role":"system","content":"You are a Ruby on Rails Active
        Record code generator"},{"role":"system","content":"Given an input question,
        first create a syntactically correct Rails Active Record code to run, then
        look at the results of the code and return the answer. Unless the user specifies
        in her question a specific number of examples she wishes to obtain, limit
        your code to at most 5 results.\nNever query for all the columns from a specific
        model, only ask for the relevant attributes given the question.\nAlso, pay
        attention to which attribute is in which model.\n\nUse the following format:\nQuestion:
        ${{Question here}}\nARChanges: ${{Active Record code to compute the number
        of records going to change}} - Only add this line if the ARCode on the next
        line will make data changes.\nARCode: ${{Active Record code to run}} - make
        sure you use valid code\nAnswer: ${{Final answer here}}\n\nOnly use the following
        Active Record models: [Comment(id: integer, content: text, user_id: integer,
        ticket_id: integer, created_at: datetime, updated_at: datetime), Ticket(id:
        integer, title: string, user_id: integer, status: integer, body: text, created_at:
        datetime, updated_at: datetime), User(id: integer, name: string, created_at:
        datetime, updated_at: datetime)]\nPay attention to use only the attribute
        names that you can see in the model description.\nDo not make up variable
        or attribute names, and do not share variables between the code in ARChanges
        and ARCode\nBe careful to not query for attributes that do not exist, and
        to use the format specified above.\nFinally, try not to use print or puts
        in your code"},{"role":"user","content":"Question: Move John''s open tickets
        to Sally"},{"role":"assistant","content":"ARChanges: `Ticket.where(user_id:
        john.id, status: ''open'').update_all(user_id: sally.id)` \nARCode: `Ticket.where(user_id:
        john.id, status: ''open'').update_all(user_id: sally.id)`"},{"role":"user","content":"ARChanges
        Error: undefined local variable or method `john - please fix \"ARChanges:\"
        to not have this error"}],"model":"gpt-3.5-turbo","temperature":0.2,"max_tokens":512,"stop":["Answer:"]}'
    headers:
      Content-Type:
      - application/json
      Authorization:
      - Bearer <openai_access_token>
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Tue, 04 Apr 2023 00:21:33 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - no-cache, must-revalidate
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - user-ri9zw9ahumb1bo9vs73mudbi
      Openai-Processing-Ms:
      - '4643'
      Openai-Version:
      - '2020-10-01'
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Request-Id:
      - 2221864d1b6453f43f778a34950b959b
      Cf-Cache-Status:
      - DYNAMIC
      Server:
      - cloudflare
      Cf-Ray:
      - 7b256434cf522806-SLC
      Alt-Svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: '{"id":"chatcmpl-71OiOmhiTWwarV4MPLi7WT5xbfjxZ","object":"chat.completion","created":1680567688,"model":"gpt-3.5-turbo-0301","usage":{"prompt_tokens":452,"completion_tokens":141,"total_tokens":593},"choices":[{"message":{"role":"assistant","content":"I
        apologize for that mistake. I assumed the existence of a variable that was
        not defined. Here''s the corrected version:\n\nARChanges: `Ticket.where(user_id:
        User.find_by(name: ''John'').id, status: ''open'').update_all(user_id: User.find_by(name:
        ''Sally'').id)` \n\nARCode: `Ticket.where(user_id: User.find_by(name: ''John'').id,
        status: ''open'').update_all(user_id: User.find_by(name: ''Sally'').id)`\n\nThis
        code will find the user with name ''John'' and the user with name ''Sally'',
        and update all open tickets that belong to John to belong to Sally instead."},"finish_reason":"stop","index":0}]}

        '
  recorded_at: Tue, 04 Apr 2023 00:21:33 GMT
recorded_with: VCR 6.1.0
