---
http_interactions:
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"messages":[{"role":"system","content":"You are a Ruby on Rails Active
        Record code generator"},{"role":"system","content":"Given an input question,
        first create a syntactically correct Rails Active Record code to run, then
        look at the results of the code and return the answer. Unless the user specifies
        in her question a specific number of examples she wishes to obtain, limit
        your code to at most 5 results.\nNever query for all the columns from a specific
        model, only ask for the relevant attributes given the question.\nAlso, pay
        attention to which attribute is in which model.\n\nUse the following format:\nQuestion:
        ${{Question here}}\nARChanges: ${{Active Record code to compute the number
        of records going to change}} - Only add this line if the ARCode on the next
        line will make data changes.\nARCode: ${{Active Record code to run}} - make
        sure you use valid code\nAnswer: ${{Final answer here}}\n\nOnly use the following
        Active Record models: [Comment(id: integer, content: text, user_id: integer,
        ticket_id: integer, created_at: datetime, updated_at: datetime), Ticket(id:
        integer, title: string, user_id: integer, status: integer, body: text, created_at:
        datetime, updated_at: datetime), User(id: integer, name: string, created_at:
        datetime, updated_at: datetime)]\nPay attention to use only the attribute
        names that you can see in the model description.\nDo not make up variable
        or attribute names, and do not share variables between the code in ARChanges
        and ARCode\nBe careful to not query for attributes that do not exist, and
        to use the format specified above.\n"},{"role":"user","content":"Question:
        Move John''s open tickets to Sally"}],"model":"gpt-3.5-turbo","temperature":0.2,"max_tokens":512,"stop":["Answer:"]}'
    headers:
      Content-Type:
      - application/json
      Authorization:
      - Bearer <openai_access_token>
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 20 Mar 2023 16:55:54 GMT
      Content-Type:
      - application/json
      Content-Length:
      - '473'
      Connection:
      - keep-alive
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - no-cache, must-revalidate
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - user-ri9zw9ahumb1bo9vs73mudbi
      Openai-Processing-Ms:
      - '3914'
      Openai-Version:
      - '2020-10-01'
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Request-Id:
      - 32d6ba642c14a23bdb5e6ac263705563
    body:
      encoding: UTF-8
      string: '{"id":"chatcmpl-6wD5SFCMTkl02DvRshrYR9cyoVc27","object":"chat.completion","created":1679331350,"model":"gpt-3.5-turbo-0301","usage":{"prompt_tokens":353,"completion_tokens":55,"total_tokens":408},"choices":[{"message":{"role":"assistant","content":"ARChanges:
        `Ticket.where(user_id: john.id, status: \"open\").update_all(user_id: sally.id)`
        \nARCode: `Ticket.where(user_id: john.id, status: \"open\").update_all(user_id:
        sally.id)` \n"},"finish_reason":"stop","index":0}]}

        '
  recorded_at: Mon, 20 Mar 2023 16:55:53 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"messages":[{"role":"system","content":"You are a Ruby on Rails Active
        Record code generator"},{"role":"system","content":"Given an input question,
        first create a syntactically correct Rails Active Record code to run, then
        look at the results of the code and return the answer. Unless the user specifies
        in her question a specific number of examples she wishes to obtain, limit
        your code to at most 5 results.\nNever query for all the columns from a specific
        model, only ask for the relevant attributes given the question.\nAlso, pay
        attention to which attribute is in which model.\n\nUse the following format:\nQuestion:
        ${{Question here}}\nARChanges: ${{Active Record code to compute the number
        of records going to change}} - Only add this line if the ARCode on the next
        line will make data changes.\nARCode: ${{Active Record code to run}} - make
        sure you use valid code\nAnswer: ${{Final answer here}}\n\nOnly use the following
        Active Record models: [Comment(id: integer, content: text, user_id: integer,
        ticket_id: integer, created_at: datetime, updated_at: datetime), Ticket(id:
        integer, title: string, user_id: integer, status: integer, body: text, created_at:
        datetime, updated_at: datetime), User(id: integer, name: string, created_at:
        datetime, updated_at: datetime)]\nPay attention to use only the attribute
        names that you can see in the model description.\nDo not make up variable
        or attribute names, and do not share variables between the code in ARChanges
        and ARCode\nBe careful to not query for attributes that do not exist, and
        to use the format specified above.\n"},{"role":"user","content":"Question:
        Move John''s open tickets to Sally"},{"role":"assistant","content":"ARChanges:
        `Ticket.where(user_id: john.id, status: \"open\").update_all(user_id: sally.id)`
        \nARCode: `Ticket.where(user_id: john.id, status: \"open\").update_all(user_id:
        sally.id)`"},{"role":"user","content":"ARChanges Error: undefined local variable
        or method `john - please fix \"ARChanges:\" to not have this error"}],"model":"gpt-3.5-turbo","temperature":0.2,"max_tokens":512,"stop":["Answer:"]}'
    headers:
      Content-Type:
      - application/json
      Authorization:
      - Bearer <openai_access_token>
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 20 Mar 2023 16:56:04 GMT
      Content-Type:
      - application/json
      Content-Length:
      - '851'
      Connection:
      - keep-alive
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - no-cache, must-revalidate
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - user-ri9zw9ahumb1bo9vs73mudbi
      Openai-Processing-Ms:
      - '9823'
      Openai-Version:
      - '2020-10-01'
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Request-Id:
      - 92dcf7bc11be497ccb5b2be34b6bc0b1
    body:
      encoding: UTF-8
      string: '{"id":"chatcmpl-6wD5WFJTkZJjoGYZTbA114OZqeKu6","object":"chat.completion","created":1679331354,"model":"gpt-3.5-turbo-0301","usage":{"prompt_tokens":439,"completion_tokens":141,"total_tokens":580},"choices":[{"message":{"role":"assistant","content":"I
        apologize for that mistake. I assumed the existence of a variable that was
        not defined. Here is the corrected version:\n\nARChanges: `Ticket.where(user_id:
        User.find_by(name: \"John\").id, status: \"open\").update_all(user_id: User.find_by(name:
        \"Sally\").id)` \n\nARCode: `Ticket.where(user_id: User.find_by(name: \"John\").id,
        status: \"open\").update_all(user_id: User.find_by(name: \"Sally\").id)`\n\nThis
        code will find the user with name \"John\" and the user with name \"Sally\"
        and update all open tickets belonging to John to belong to Sally instead."},"finish_reason":"stop","index":0}]}

        '
  recorded_at: Mon, 20 Mar 2023 16:56:03 GMT
recorded_with: VCR 6.1.0
