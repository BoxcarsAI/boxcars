---
http_interactions:
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"messages":[{"role":"system","content":"You are a Ruby on Rails Active
        Record code generator"},{"role":"system","content":"Given an input question,
        first create a syntactically correct Rails Active Record code to run, then
        look at the results of the code and return the answer. Unless the user specifies
        in her question a specific number of examples she wishes to obtain, limit
        your code to at most 5 results.\nNever query for all the columns from a specific
        model, only ask for the relevant attributes given the question.\nAlso, pay
        attention to which attribute is in which model."},{"role":"system","content":"Use
        the following format:\nQuestion: ${{Question here}}\nARCode: ${{Active Record
        code to run}} - make sure you use valid code\nARChanges: ${{Active Record
        code to compute the number of records going to change}} - Only add this line
        if the ARCode on the line before will make data changes.\nAnswer: ${{Final
        answer here}}"},{"role":"system","content":"Only use the following Active
        Record models: [Comment(id: integer, content: text, user_id: integer, ticket_id:
        integer, created_at: datetime, updated_at: datetime), Ticket(id: integer,
        title: string, user_id: integer, status: integer, body: text, created_at:
        datetime, updated_at: datetime), User(id: integer, name: string, created_at:
        datetime, updated_at: datetime)]\nPay attention to use only the attribute
        names that you can see in the model description. Be careful to not query for
        attributes that do not exist.\n"},{"role":"assistant","content":"Question:
        Move John''s open tickets to Sally"}],"model":"gpt-3.5-turbo","temperature":0.2,"max_tokens":512,"stop":["Answer:"]}'
    headers:
      Content-Type:
      - application/json
      Authorization:
      - Bearer <openai_access_token>
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 16 Mar 2023 19:43:21 GMT
      Content-Type:
      - application/json
      Content-Length:
      - '637'
      Connection:
      - keep-alive
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - no-cache, must-revalidate
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - user-ri9zw9ahumb1bo9vs73mudbi
      Openai-Processing-Ms:
      - '3808'
      Openai-Version:
      - '2020-10-01'
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      X-Request-Id:
      - 7aa307a1035fede6d984aadab5925e30
    body:
      encoding: UTF-8
      string: '{"id":"chatcmpl-6unnKXKF5RbgBjr4PxeuXL0a9JlWx","object":"chat.completion","created":1678995798,"model":"gpt-3.5-turbo-0301","usage":{"prompt_tokens":331,"completion_tokens":95,"total_tokens":426},"choices":[{"message":{"role":"assistant","content":"#
        This code will update all open tickets of John to Sally\nARCode: Ticket.where(user_id:
        User.find_by(name: ''John'').id, status: ''open'').update_all(user_id: User.find_by(name:
        ''Sally'').id)\n\n# This code will compute the number of records that will
        be changed\nARChanges: Ticket.where(user_id: User.find_by(name: ''John'').id,
        status: ''open'').count\n\n"},"finish_reason":"stop","index":0}]}

        '
  recorded_at: Thu, 16 Mar 2023 19:43:21 GMT
recorded_with: VCR 6.1.0
