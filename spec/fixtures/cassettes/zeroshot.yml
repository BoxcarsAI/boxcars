---
http_interactions:
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"messages":[{"role":"system","content":"Answer the following questions
        as best you can. You have access to the following actions:\nSearch: useful
        for when you need to answer questions about current events.You should ask
        targeted questions\nCalculator: useful for when you need to answer questions
        about math\nUse the following format:\nQuestion: the input question you must
        answer\nThought: you should always think about what to do\nAction: the action
        to take, should be one from this list: [Search, Calculator]\nAction Input:
        the input to the action\nObservation: the result of the action\n... (this
        Thought/Action/Action Input/Observation sequence can repeat N times)\nThought:
        I know the final answer\nFinal Answer: the final answer to the original input
        question\nNext Actions: Up to 3 logical suggested next questions for the user
        to ask after getting this answer.\nRemember to start a line with \"Final Answer:\"
        to give me the final answer.\nBegin!"},{"role":"user","content":"Question:
        What is pi times the square root of the average Fahrenheit temperature in
        Austin TX in January?"},{"role":"assistant","content":"Thought: "}],"model":"gpt-3.5-turbo","temperature":0.2,"max_tokens":512,"stop":["\nObservation:
        "]}'
    headers:
      Content-Type:
      - application/json
      Authorization:
      - Bearer <openai_access_token>
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 20 Mar 2023 22:12:32 GMT
      Content-Type:
      - application/json
      Content-Length:
      - '588'
      Connection:
      - keep-alive
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - no-cache, must-revalidate
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - user-ri9zw9ahumb1bo9vs73mudbi
      Openai-Processing-Ms:
      - '5557'
      Openai-Version:
      - '2020-10-01'
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Request-Id:
      - 4c3e30cb2dbbbee54c54579bb1d01537
    body:
      encoding: UTF-8
      string: '{"id":"chatcmpl-6wI1qjnRFNkxFVETzeuPGJ7oippMW","object":"chat.completion","created":1679350346,"model":"gpt-3.5-turbo-0301","usage":{"prompt_tokens":229,"completion_tokens":61,"total_tokens":290},"choices":[{"message":{"role":"assistant","content":"We
        need to find the average temperature in Austin, TX in January and then multiply
        it by the square root of pi. We can use a search engine to find the average
        temperature and a calculator to perform the multiplication. \n\nAction: Search\nAction
        Input: \"Average temperature in Austin TX in January\""},"finish_reason":"stop","index":0}]}

        '
  recorded_at: Mon, 20 Mar 2023 22:12:32 GMT
- request:
    method: get
    uri: https://serpapi.com/search?api_key=<SERPAPI_API_KEY>&engine=google&output=json&q=Average%20temperature%20in%20Austin%20TX%20in%20January&source=ruby
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 20 Mar 2023 22:12:36 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Cf-Ray:
      - 7ab14c180ae2a080-SLC
      Cache-Control:
      - max-age=3600, public
      Etag:
      - W/"706da341aa96340553258311a3177509"
      Vary:
      - Accept-Encoding
      Cf-Cache-Status:
      - MISS
      Referrer-Policy:
      - strict-origin-when-cross-origin
      Serpapi-Search-Id:
      - 6418da50ef7ddad574afb8bb
      X-Content-Type-Options:
      - nosniff
      X-Download-Options:
      - noopen
      X-Frame-Options:
      - SAMEORIGIN
      X-Permitted-Cross-Domain-Policies:
      - none
      X-Request-Id:
      - b5d8c5ff-8104-41ff-8b84-cb3c2bcb928a
      X-Robots-Tag:
      - noindex, nofollow
      X-Runtime:
      - '3.916367'
      X-Xss-Protection:
      - 1; mode=block
      Server:
      - cloudflare
      Alt-Svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 20 Mar 2023 22:12:36 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"messages":[{"role":"system","content":"Answer the following questions
        as best you can. You have access to the following actions:\nSearch: useful
        for when you need to answer questions about current events.You should ask
        targeted questions\nCalculator: useful for when you need to answer questions
        about math\nUse the following format:\nQuestion: the input question you must
        answer\nThought: you should always think about what to do\nAction: the action
        to take, should be one from this list: [Search, Calculator]\nAction Input:
        the input to the action\nObservation: the result of the action\n... (this
        Thought/Action/Action Input/Observation sequence can repeat N times)\nThought:
        I know the final answer\nFinal Answer: the final answer to the original input
        question\nNext Actions: Up to 3 logical suggested next questions for the user
        to ask after getting this answer.\nRemember to start a line with \"Final Answer:\"
        to give me the final answer.\nBegin!"},{"role":"user","content":"Question:
        What is pi times the square root of the average Fahrenheit temperature in
        Austin TX in January?"},{"role":"assistant","content":"Thought:  We need to
        find the average temperature in Austin, TX in January and then multiply it
        by the square root of pi. We can use a search engine to find the average temperature
        and a calculator to perform the multiplication. \n\nAction: Search\nAction
        Input: \"Average temperature in Austin TX in January\"\nObservation: Daily
        high temperatures increase by 2°F, from 62°F to 64°F\nThought:"}],"model":"gpt-3.5-turbo","temperature":0.2,"max_tokens":512,"stop":["\nObservation:
        "]}'
    headers:
      Content-Type:
      - application/json
      Authorization:
      - Bearer <openai_access_token>
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 20 Mar 2023 22:12:40 GMT
      Content-Type:
      - application/json
      Content-Length:
      - '464'
      Connection:
      - keep-alive
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - no-cache, must-revalidate
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - user-ri9zw9ahumb1bo9vs73mudbi
      Openai-Processing-Ms:
      - '2899'
      Openai-Version:
      - '2020-10-01'
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Request-Id:
      - 0d2b8b9e60d2350fa26e1b5184574555
    body:
      encoding: UTF-8
      string: '{"id":"chatcmpl-6wI21Vsj1BhC8zAg9lrhJzndbabnr","object":"chat.completion","created":1679350357,"model":"gpt-3.5-turbo-0301","usage":{"prompt_tokens":312,"completion_tokens":36,"total_tokens":348},"choices":[{"message":{"role":"assistant","content":"We
        need the average temperature, not just the daily high temperature. Let''s
        try another search.\n\nAction: Search\nAction Input: \"Average temperature
        in Austin TX in January\""},"finish_reason":"stop","index":0}]}

        '
  recorded_at: Mon, 20 Mar 2023 22:12:40 GMT
- request:
    method: get
    uri: https://serpapi.com/search?api_key=<SERPAPI_API_KEY>&engine=google&output=json&q=Average%20temperature%20in%20Austin%20TX%20in%20January&source=ruby
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 20 Mar 2023 22:12:40 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Cf-Ray:
      - 7ab14c47aa9c27e4-SLC
      Age:
      - '4'
      Cache-Control:
      - max-age=3600, public
      Etag:
      - W/"706da341aa96340553258311a3177509"
      Vary:
      - Accept-Encoding
      Cf-Cache-Status:
      - HIT
      Referrer-Policy:
      - strict-origin-when-cross-origin
      Serpapi-Search-Id:
      - 6418da50ef7ddad574afb8bb
      X-Content-Type-Options:
      - nosniff
      X-Download-Options:
      - noopen
      X-Frame-Options:
      - SAMEORIGIN
      X-Permitted-Cross-Domain-Policies:
      - none
      X-Request-Id:
      - b5d8c5ff-8104-41ff-8b84-cb3c2bcb928a
      X-Robots-Tag:
      - noindex, nofollow
      X-Runtime:
      - '3.916367'
      X-Xss-Protection:
      - 1; mode=block
      Server:
      - cloudflare
      Alt-Svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJzZWFyY2hfbWV0YWRhdGEiOiB7CiAgICAiaWQiOiAiNjQxOGRhNTBlZjdkZGFkNTc0YWZiOGJiIiwKICAgICJzdGF0dXMiOiAiU3VjY2VzcyIsCiAgICAianNvbl9lbmRwb2ludCI6ICJodHRwczovL3NlcnBhcGkuY29tL3NlYXJjaGVzL2FiM2ZlMDQ3MTUxZjRlOTMvNjQxOGRhNTBlZjdkZGFkNTc0YWZiOGJiLmpzb24iLAogICAgImNyZWF0ZWRfYXQiOiAiMjAyMy0wMy0yMCAyMjoxMjozMiBVVEMiLAogICAgInByb2Nlc3NlZF9hdCI6ICIyMDIzLTAzLTIwIDIyOjEyOjMyIFVUQyIsCiAgICAiZ29vZ2xlX3VybCI6ICJodHRwczovL3d3dy5nb29nbGUuY29tL3NlYXJjaD9xPUF2ZXJhZ2UrdGVtcGVyYXR1cmUraW4rQXVzdGluK1RYK2luK0phbnVhcnkmb3E9QXZlcmFnZSt0ZW1wZXJhdHVyZStpbitBdXN0aW4rVFgraW4rSmFudWFyeSZzb3VyY2VpZD1jaHJvbWUmaWU9VVRGLTgiLAogICAgInJhd19odG1sX2ZpbGUiOiAiaHR0cHM6Ly9zZXJwYXBpLmNvbS9zZWFyY2hlcy9hYjNmZTA0NzE1MWY0ZTkzLzY0MThkYTUwZWY3ZGRhZDU3NGFmYjhiYi5odG1sIiwKICAgICJ0b3RhbF90aW1lX3Rha2VuIjogMy42NwogIH0sCiAgInNlYXJjaF9wYXJhbWV0ZXJzIjogewogICAgImVuZ2luZSI6ICJnb29nbGUiLAogICAgInEiOiAiQXZlcmFnZSB0ZW1wZXJhdHVyZSBpbiBBdXN0aW4gVFggaW4gSmFudWFyeSIsCiAgICAiZ29vZ2xlX2RvbWFpbiI6ICJnb29nbGUuY29tIiwKICAgICJkZXZpY2UiOiAiZGVza3RvcCIKICB9LAogICJzZWFyY2hfaW5mb3JtYXRpb24iOiB7CiAgICAib3JnYW5pY19yZXN1bHRzX3N0YXRlIjogIlJlc3VsdHMgZm9yIGV4YWN0IHNwZWxsaW5nIiwKICAgICJxdWVyeV9kaXNwbGF5ZWQiOiAiQXZlcmFnZSB0ZW1wZXJhdHVyZSBpbiBBdXN0aW4gVFggaW4gSmFudWFyeSIsCiAgICAidG90YWxfcmVzdWx0cyI6IDI0MjAwMDAwLAogICAgInRpbWVfdGFrZW5fZGlzcGxheWVkIjogMC42LAogICAgIm1lbnVfaXRlbXMiOiBbCiAgICAgIHsKICAgICAgICAicG9zaXRpb24iOiAxLAogICAgICAgICJ0aXRsZSI6ICJBbGwiCiAgICAgIH0sCiAgICAgIHsKICAgICAgICAicG9zaXRpb24iOiAyLAogICAgICAgICJ0aXRsZSI6ICJJbWFnZXMiLAogICAgICAgICJsaW5rIjogImh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vc2VhcmNoP3E9QXZlcmFnZSt0ZW1wZXJhdHVyZStpbitBdXN0aW4rVFgraW4rSmFudWFyeSZzb3VyY2U9bG5tcyZ0Ym09aXNjaCZzYT1YJnZlZD0yYWhVS0V3anN3T0hLdy12OUFoV2tSekFCSFhUSURqd1FfQVVvQVhvRUNBRVFBdyIsCiAgICAgICAgInNlcnBhcGlfbGluayI6ICJodHRwczovL3NlcnBhcGkuY29tL3NlYXJjaC5qc29uP2RldmljZT1kZXNrdG9wJmVuZ2luZT1nb29nbGUmZ29vZ2xlX2RvbWFpbj1nb29nbGUuY29tJnE9QXZlcmFnZSt0ZW1wZXJhdHVyZStpbitBdXN0aW4rVFgraW4rSmFudWFyeSZ0Ym09aXNjaCIKICAgICAgfSwKICAgICAgewogICAgICAgICJwb3NpdGlvbiI6IDMsCiAgICAgICAgInRpdGxlIjogIlNob3BwaW5nIiwKICAgICAgICAibGluayI6ICJodHRwczovL3d3dy5nb29nbGUuY29tL3NlYXJjaD9xPUF2ZXJhZ2UrdGVtcGVyYXR1cmUraW4rQXVzdGluK1RYK2luK0phbnVhcnkmc291cmNlPWxubXMmdGJtPXNob3Amc2E9WCZ2ZWQ9MmFoVUtFd2pzd09IS3ctdjlBaFdrUnpBQkhYVElEandRX0FVb0Fub0VDQUVRQkEiLAogICAgICAgICJzZXJwYXBpX2xpbmsiOiAiaHR0cHM6Ly9zZXJwYXBpLmNvbS9zZWFyY2guanNvbj9kZXZpY2U9ZGVza3RvcCZlbmdpbmU9Z29vZ2xlJmdvb2dsZV9kb21haW49Z29vZ2xlLmNvbSZxPUF2ZXJhZ2UrdGVtcGVyYXR1cmUraW4rQXVzdGluK1RYK2luK0phbnVhcnkmdGJtPXNob3AiCiAgICAgIH0sCiAgICAgIHsKICAgICAgICAicG9zaXRpb24iOiA0LAogICAgICAgICJ0aXRsZSI6ICJOZXdzIiwKICAgICAgICAibGluayI6ICJodHRwczovL3d3dy5nb29nbGUuY29tL3NlYXJjaD9xPUF2ZXJhZ2UrdGVtcGVyYXR1cmUraW4rQXVzdGluK1RYK2luK0phbnVhcnkmc291cmNlPWxubXMmdGJtPW53cyZzYT1YJnZlZD0yYWhVS0V3anN3T0hLdy12OUFoV2tSekFCSFhUSURqd1FfQVVvQTNvRUNBRVFCUSIsCiAgICAgICAgInNlcnBhcGlfbGluayI6ICJodHRwczovL3NlcnBhcGkuY29tL3NlYXJjaC5qc29uP2RldmljZT1kZXNrdG9wJmVuZ2luZT1nb29nbGUmZ29vZ2xlX2RvbWFpbj1nb29nbGUuY29tJnE9QXZlcmFnZSt0ZW1wZXJhdHVyZStpbitBdXN0aW4rVFgraW4rSmFudWFyeSZ0Ym09bndzIgogICAgICB9LAogICAgICB7CiAgICAgICAgInBvc2l0aW9uIjogNSwKICAgICAgICAidGl0bGUiOiAiTWFwcyIsCiAgICAgICAgImxpbmsiOiAiaHR0cHM6Ly9tYXBzLmdvb2dsZS5jb20vbWFwcz9xPUF2ZXJhZ2UrdGVtcGVyYXR1cmUraW4rQXVzdGluK1RYK2luK0phbnVhcnkmdW09MSZpZT1VVEYtOCZzYT1YJnZlZD0yYWhVS0V3anN3T0hLdy12OUFoV2tSekFCSFhUSURqd1FfQVVvQkhvRUNBRVFCZyIKICAgICAgfQogICAgXQogIH0sCiAgInJlbGF0ZWRfcXVlc3Rpb25zIjogWwogICAgewogICAgICAicXVlc3Rpb24iOiAiV2hhdCBpcyB0aGUgY29sZGVzdCBtb250aCBpbiBBdXN0aW4gVGV4YXM/IiwKICAgICAgInNuaXBwZXQiOiAiSmFudWFyeSBpcywgb24gYXZlcmFnZSwgb3VyIGNvbGRlc3QgbW9udGggb2YgdGhlIHllYXIgd2l0aCBhbiBhdmVyYWdlIHRlbXBlcmF0dXJlIG9mIDUyLjLCuiBpbiBBdXN0aW4gYXQgQ2FtcCBNYWJyeS4gVGhlIHR5cGljYWwgY29sZGVzdCBkYXlzIG9mIHRoZSB5ZWFyIGFyZSBmcm9tIEphbi4gMi0xNCB3aGVyZSBhdmVyYWdlIGhpZ2hzIGFyZSBhcm91bmQgNjLCuiBhbmQgYXZlcmFnZSBsb3dzIGRyb3AgdG8gNDHCui4iLAogICAgICAidGl0bGUiOiAiSmFudWFyeSIsCiAgICAgICJkYXRlIjogIkphbiA4LCAyMDIzIiwKICAgICAgImxpbmsiOiAiaHR0cHM6Ly93d3cua3hhbi5jb20vd2VhdGhlci93ZWF0aGVyLWJsb2cvYXVzdGluLXJlY29yZHMtM3JkLXdhcm1lc3Qtc3RhcnQtdG8tamFudWFyeS1vbi1yZWNvcmQvIzp+OnRleHQ9SmFudWFyeSUyMGlzJTJDJTIwb24lMjBhdmVyYWdlJTJDJTIwb3VyLGluJTIwQXVzdGluJTIwYXQlMjBDYW1wJTIwTWFicnkuJnRleHQ9VGhlJTIwdHlwaWNhbCUyMGNvbGRlc3QlMjBkYXlzJTIwb2YsYXZlcmFnZSUyMGxvd3MlMjBkcm9wJTIwdG8lMjA0MSVDMiVCQS4iLAogICAgICAiZGlzcGxheWVkX2xpbmsiOiAiaHR0cHM6Ly93d3cua3hhbi5jb20g4oC6IHdlYXRoZXIg4oC6IHdlYXRoZXItYmxvZyDigLogYXVzLi4uIiwKICAgICAgInRodW1ibmFpbCI6ICJodHRwczovL3NlcnBhcGkuY29tL3NlYXJjaGVzLzY0MThkYTUwZWY3ZGRhZDU3NGFmYjhiYi9pbWFnZXMvZWFmMzIzZDc2ZmNhMTAxZDViNzhjOThmZWM5MzRlMjQwNzc4OWVmYWZhZTA3YTgwMDYyYTRhZGE0MWFjZjljYi5wbmciLAogICAgICAibmV4dF9wYWdlX3Rva2VuIjogImV5SnZibk1pT2lJeE1EQTBNU0lzSW1aaklqb2lSVzl6UWtOcmVFSlJNVUl6WVcxd1ZWZEdaSEJTYlZKUVZVVmFWMkY2Vm14bGJuQm1ZakpPZW1SdFpGcGtXRkl6WTJ4Q05FeFlaSEZUTUVaMVZsVmFlazlWT0hoYVJsSm1ZMjFWTUZWWVZqVk5WVGxVVTNwb1JXVlhSak5VTTBvMlZIcENkbE16V214T1NGcFpSV2hrVm1SSE9WcFhhemsyVlVWMGVGVXhRak5aYlhSUlQxVndSRTU2VWtKVVVtOXBVVlZhWms1ck1VSlZSRkpZV1Zack1WVjZVa05WYlZsNlVXeEdNbUpJWkhGYVJrb3hZMWQzTkdScVJYZFJVU0lzSW1aamRpSTZJak1pTENKbGFTSTZJbFYwYjFsYVQzcFFTM0ZUVUhkaWExQTVTa00zTkVGTklpd2ljV01pT2lKakxWQlRWR2w0VEV4VmNFMVVNVlZ2VTJNd2RFRk1Ta3RUYjNSVFJsUk1la1pDU2t4cE1IVkJWa1ZyUm1sS1QxWnRSbVZoVjBaUmNIZEdRWEpWYmtSVVJHZEJJaXdpY1hWbGMzUnBiMjRpT2lKWGFHRjBJR2x6SUhSb1pTQmpiMnhrWlhOMElHMXZiblJvSUdsdUlFRjFjM1JwYmlCVVpYaGhjejhpTENKc2F5STZJa2RwYkROaFIwWXdTVWRzZWtsSVVtOWFVMEpxWWpKNGExcFlUakJKUnpGMlltNVNiMGxIYkhWSlIwWXhZek5TY0dKcFFqQmFXR2hvWTNjaUxDSmljeUk2SW1NdFVGTTFPVWxMZWpCbmMxVmpaM05XYVdwS1UwWldTWHB6T1VwVFV6QjFWV05xVG5wNWRrcFZUV3BOVlROQmMweFRORUpWYVVkd1JsbHVSamxvU1VoMlltZ3dkVTVST1dsNFZ6aEZkazVMUlRSemNVWlNTVll3ZGxCNlZYaFNTMDF1VGxSR1ZYSjVSbU52ZVdsNlRreHZTSEp6U21KYVdXTXliSGx4V0dwcmJIbDFWVXA0WW14bmNYaEJUbWN4YTA5MFVWbGxOR3RJVVd4NFIxaE1jR2RzTkVST2VXczVWSEZGZUU1TVFVeHdVMUZMTlVJNE1YTm9Xa0ZKWlRSdWNISkJTMDFCUVNJc0ltbGtJam9pWm1OZk1TSjkiLAogICAgICAic2VycGFwaV9saW5rIjogImh0dHBzOi8vc2VycGFwaS5jb20vc2VhcmNoLmpzb24/ZGV2aWNlPWRlc2t0b3AmZW5naW5lPWdvb2dsZV9yZWxhdGVkX3F1ZXN0aW9ucyZnb29nbGVfZG9tYWluPWdvb2dsZS5jb20mbmV4dF9wYWdlX3Rva2VuPWV5SnZibk1pT2lJeE1EQTBNU0lzSW1aaklqb2lSVzl6UWtOcmVFSlJNVUl6WVcxd1ZWZEdaSEJTYlZKUVZVVmFWMkY2Vm14bGJuQm1ZakpPZW1SdFpGcGtXRkl6WTJ4Q05FeFlaSEZUTUVaMVZsVmFlazlWT0hoYVJsSm1ZMjFWTUZWWVZqVk5WVGxVVTNwb1JXVlhSak5VTTBvMlZIcENkbE16V214T1NGcFpSV2hrVm1SSE9WcFhhemsyVlVWMGVGVXhRak5aYlhSUlQxVndSRTU2VWtKVVVtOXBVVlZhWms1ck1VSlZSRkpZV1Zack1WVjZVa05WYlZsNlVXeEdNbUpJWkhGYVJrb3hZMWQzTkdScVJYZFJVU0lzSW1aamRpSTZJak1pTENKbGFTSTZJbFYwYjFsYVQzcFFTM0ZUVUhkaWExQTVTa00zTkVGTklpd2ljV01pT2lKakxWQlRWR2w0VEV4VmNFMVVNVlZ2VTJNd2RFRk1Ta3RUYjNSVFJsUk1la1pDU2t4cE1IVkJWa1ZyUm1sS1QxWnRSbVZoVjBaUmNIZEdRWEpWYmtSVVJHZEJJaXdpY1hWbGMzUnBiMjRpT2lKWGFHRjBJR2x6SUhSb1pTQmpiMnhrWlhOMElHMXZiblJvSUdsdUlFRjFjM1JwYmlCVVpYaGhjejhpTENKc2F5STZJa2RwYkROaFIwWXdTVWRzZWtsSVVtOWFVMEpxWWpKNGExcFlUakJKUnpGMlltNVNiMGxIYkhWSlIwWXhZek5TY0dKcFFqQmFXR2hvWTNjaUxDSmljeUk2SW1NdFVGTTFPVWxMZWpCbmMxVmpaM05XYVdwS1UwWldTWHB6T1VwVFV6QjFWV05xVG5wNWRrcFZUV3BOVlROQmMweFRORUpWYVVkd1JsbHVSamxvU1VoMlltZ3dkVTVST1dsNFZ6aEZkazVMUlRSemNVWlNTVll3ZGxCNlZYaFNTMDF1VGxSR1ZYSjVSbU52ZVdsNlRreHZTSEp6U21KYVdXTXliSGx4V0dwcmJIbDFWVXA0WW14bmNYaEJUbWN4YTA5MFVWbGxOR3RJVVd4NFIxaE1jR2RzTkVST2VXczVWSEZGZUU1TVFVeHdVMUZMTlVJNE1YTm9Xa0ZKWlRSdWNISkJTMDFCUVNJc0ltbGtJam9pWm1OZk1TSjkiCiAgICB9LAogICAgewogICAgICAicXVlc3Rpb24iOiAiSXMgSmFudWFyeSBhIGdvb2QgdGltZSB0byB2aXNpdCBBdXN0aW4/IiwKICAgICAgInNuaXBwZXQiOiAiTm92ZW1iZXIgdGhyb3VnaCBGZWJydWFyeSBpcyBjb25zaWRlcmVkIHRoZSBzaG91bGRlciBzZWFzb24uIFZpc2l0aW5nIGR1cmluZyB0aGVzZSBtb250aHMgaXMgYSBzbWFydCBjaG9pY2UgZm9yIGJ1ZGdldC1jb25zY2lvdXMgdHJhdmVsZXJzIHdobyB3YW50IHRvIGVuam95IGV2ZXJ5dGhpbmcgQXVzdGluIGhhcyB0byBvZmZlciBhdCBhIGNoZWFwZXIgcmF0ZS4iLAogICAgICAidGl0bGUiOiAiV2hlbiB0byBWaXNpdCBBdXN0aW4sIFRleGFzOiA1IEltcG9ydGFudCBDb25zaWRlcmF0aW9ucyIsCiAgICAgICJkYXRlIjogIk1hciA3LCAyMDE5IiwKICAgICAgImxpbmsiOiAiaHR0cHM6Ly9saXZlb2FrYnJld2luZy5jb20vd2hlbi10by12aXNpdC1hdXN0aW4tdGV4YXMtNS1pbXBvcnRhbnQtY29uc2lkZXJhdGlvbnMvIzp+OnRleHQ9Tm92ZW1iZXIlMjB0aHJvdWdoJTIwRmVicnVhcnklMjBpcyUyMGNvbnNpZGVyZWQsb2ZmZXIlMjBhdCUyMGElMjBjaGVhcGVyJTIwcmF0ZS4iLAogICAgICAiZGlzcGxheWVkX2xpbmsiOiAiaHR0cHM6Ly9saXZlb2FrYnJld2luZy5jb20g4oC6IHdoZW4tdG8tdmlzaXQtYXVzdGluLXRleGFzLS4uLiIsCiAgICAgICJ0aHVtYm5haWwiOiAiaHR0cHM6Ly9zZXJwYXBpLmNvbS9zZWFyY2hlcy82NDE4ZGE1MGVmN2RkYWQ1NzRhZmI4YmIvaW1hZ2VzL2VhZjMyM2Q3NmZjYTEwMWQ1Yjc4Yzk4ZmVjOTM0ZTI0ODIwZjhkYWM2NTVkZTEzNDg5NjI4ZTAzZjRkY2Q2NzcucG5nIiwKICAgICAgIm5leHRfcGFnZV90b2tlbiI6ICJleUp2Ym5NaU9pSXhNREEwTVNJc0ltWmpJam9pUlc5elFrTnJlRUpSTVVJellXMXdWVmRHWkhCU2JWSlFWVVZhVjJGNlZteGxibkJtWWpKT2VtUnRaRnBrV0ZJelkyeENORXhZWkhGVE1FWjFWbFZhZWs5Vk9IaGFSbEptWTIxVk1GVllWalZOVlRsVVUzcG9SV1ZYUmpOVU0wbzJWSHBDZGxNeldteE9TRnBaUldoa1ZtUkhPVnBYYXprMlZVVjBlRlV4UWpOWmJYUlJUMVZ3UkU1NlVrSlVVbTlwVVZWYVprNXJNVUpWUkZKWVdWWnJNVlY2VWtOVmJWbDZVV3hHTW1KSVpIRmFSa294WTFkM05HUnFSWGRSVVNJc0ltWmpkaUk2SWpNaUxDSmxhU0k2SWxWMGIxbGFUM3BRUzNGVFVIZGlhMUE1U2tNM05FRk5JaXdpY1dNaU9pSmpMVkJUVkdsNFRFeFZjRTFVTVZWdlUyTXdkRUZNU2t0VGIzUlRSbFJNZWtaQ1NreHBNSFZCVmtWclJtbEtUMVp0Um1WaFYwWlJjSGRHUVhKVmJrUlVSR2RCSWl3aWNYVmxjM1JwYjI0aU9pSkpjeUJLWVc1MVlYSjVJR0VnWjI5dlpDQjBhVzFsSUhSdklIWnBjMmwwSUVGMWMzUnBiajhpTENKc2F5STZJa2RwV25CamVVSnhXVmMxTVZsWVNqVkpSMFZuV2pJNWRscERRakJoVnpGc1NVaFNka2xJV25Cak1td3dTVWRHTVdNelVuQmlaeUlzSW1Keklqb2lZeTFRVXpVNVNVdDZNR2R6VldObmMxWnBha3BUUmxaSmVuTTVTbE5UTUhWVlkycE9lbmwyU2xWTmFrMVZNMEZ6VEZNMFFsVnBSM0JHV1c1R09XaEpTSFppYURCMVRsRTVhWGhYT0VWMlRrdEZOSE54UmxKSlZqQjJVSHBWZUZKTFRXNU9WRVpWY25sR1kyOTVhWHBPVEc5SWNuTktZbHBaWXpKc2VYRllhbXRzZVhWVlNuaGliR2R4ZUVGT1p6RnJUM1JSV1dVMGEwaFJiSGhIV0V4d1oydzBSRTU1YXpsVWNVVjRUa3hCVEhCVFVVczFRamd4YzJoYVFVbGxORzV3Y2tGTFRVRkJJaXdpYVdRaU9pSm1ZMTh4SW4wPSIsCiAgICAgICJzZXJwYXBpX2xpbmsiOiAiaHR0cHM6Ly9zZXJwYXBpLmNvbS9zZWFyY2guanNvbj9kZXZpY2U9ZGVza3RvcCZlbmdpbmU9Z29vZ2xlX3JlbGF0ZWRfcXVlc3Rpb25zJmdvb2dsZV9kb21haW49Z29vZ2xlLmNvbSZuZXh0X3BhZ2VfdG9rZW49ZXlKdmJuTWlPaUl4TURBME1TSXNJbVpqSWpvaVJXOXpRa05yZUVKUk1VSXpZVzF3VlZkR1pIQlNiVkpRVlVWYVYyRjZWbXhsYm5CbVlqSk9lbVJ0WkZwa1dGSXpZMnhDTkV4WVpIRlRNRVoxVmxWYWVrOVZPSGhhUmxKbVkyMVZNRlZZVmpWTlZUbFVVM3BvUldWWFJqTlVNMG8yVkhwQ2RsTXpXbXhPU0ZwWlJXaGtWbVJIT1ZwWGF6azJWVVYwZUZVeFFqTlpiWFJSVDFWd1JFNTZVa0pVVW05cFVWVmFaazVyTVVKVlJGSllXVlpyTVZWNlVrTlZiVmw2VVd4R01tSklaSEZhUmtveFkxZDNOR1JxUlhkUlVTSXNJbVpqZGlJNklqTWlMQ0psYVNJNklsVjBiMWxhVDNwUVMzRlRVSGRpYTFBNVNrTTNORUZOSWl3aWNXTWlPaUpqTFZCVFZHbDRURXhWY0UxVU1WVnZVMk13ZEVGTVNrdFRiM1JUUmxSTWVrWkNTa3hwTUhWQlZrVnJSbWxLVDFadFJtVmhWMFpSY0hkR1FYSlZia1JVUkdkQklpd2ljWFZsYzNScGIyNGlPaUpKY3lCS1lXNTFZWEo1SUdFZ1oyOXZaQ0IwYVcxbElIUnZJSFpwYzJsMElFRjFjM1JwYmo4aUxDSnNheUk2SWtkcFduQmplVUp4V1ZjMU1WbFlTalZKUjBWbldqSTVkbHBEUWpCaFZ6RnNTVWhTZGtsSVduQmpNbXd3U1VkR01XTXpVbkJpWnlJc0ltSnpJam9pWXkxUVV6VTVTVXQ2TUdkelZXTm5jMVpwYWtwVFJsWkplbk01U2xOVE1IVlZZMnBPZW5sMlNsVk5hazFWTTBGelRGTTBRbFZwUjNCR1dXNUdPV2hKU0haaWFEQjFUbEU1YVhoWE9FVjJUa3RGTkhOeFJsSkpWakIyVUhwVmVGSkxUVzVPVkVaVmNubEdZMjk1YVhwT1RHOUljbk5LWWxwWll6SnNlWEZZYW10c2VYVlZTbmhpYkdkeGVFRk9aekZyVDNSUldXVTBhMGhSYkhoSFdFeHdaMncwUkU1NWF6bFVjVVY0VGt4QlRIQlRVVXMxUWpneGMyaGFRVWxsTkc1d2NrRkxUVUZCSWl3aWFXUWlPaUptWTE4eEluMCUzRCIKICAgIH0sCiAgICB7CiAgICAgICJxdWVzdGlvbiI6ICJIb3cgd2FybSBpcyBBdXN0aW4gVGV4YXMgaW4gSmFudWFyeT8iLAogICAgICAic25pcHBldCI6ICJKYW51YXJ5IGlzIHRoZSBjb2xkZXN0IG1vbnRoIG92ZXJhbGwgZm9yIEF1c3RpbiBhbmQgdGhlIDJuZCB0byAxNHRoIGFyZSBpdHMgY2hpbGxpZXN0IGRheXMuIFRoZXkgaGF2ZSBkYWlseSBoaWdocyBhdmVyYWdpbmcgNjIgZGVncmVlcyBGYWhyZW5oZWl0ICgxNyBkZWdyZWVzIENlbHNpdXMpIGFuZCBsb3dzIG9mIDQxIMKwRiAoNSDCsEMpLiBUaGUgdGVtcGVyYXR1cmUgcmlzZXMgbW9zdCBkYXlzIGR1cmluZyBKYW51YXJ5IHRvIG92ZXIgNTAgwrBGICgxMCDCsEMpIGluIEF1c3Rpbi4iLAogICAgICAidGl0bGUiOiAiQXVzdGluIFdlYXRoZXIgaW4gSmFudWFyeSAtIEN1cnJlbnQgUmVzdWx0cyIsCiAgICAgICJsaW5rIjogImh0dHBzOi8vd3d3LmN1cnJlbnRyZXN1bHRzLmNvbS9XZWF0aGVyL1RleGFzL1BsYWNlcy9hdXN0aW4td2VhdGhlci1pbi1qYW51YXJ5LnBocCM6fjp0ZXh0PUphbnVhcnklMjBpcyUyMHRoZSUyMGNvbGRlc3QlMjBtb250aCxGJTIwKDUlMjAlQzIlQjBDKS4mdGV4dD1UaGUlMjB0ZW1wZXJhdHVyZSUyMHJpc2VzJTIwbW9zdCUyMGRheXMsMTAlMjAlQzIlQjBDKSUyMGluJTIwQXVzdGluLiIsCiAgICAgICJkaXNwbGF5ZWRfbGluayI6ICJodHRwczovL3d3dy5jdXJyZW50cmVzdWx0cy5jb20g4oC6IFRleGFzIOKAuiBQbGFjZXMg4oC6IGF1c3QuLi4iLAogICAgICAidGh1bWJuYWlsIjogImh0dHBzOi8vc2VycGFwaS5jb20vc2VhcmNoZXMvNjQxOGRhNTBlZjdkZGFkNTc0YWZiOGJiL2ltYWdlcy9lYWYzMjNkNzZmY2ExMDFkNWI3OGM5OGZlYzkzNGUyNDhhYzQ5ZWZlOTZjMGM4ODM0MDQwOGE5NjE3YWE1M2FhLnBuZyIsCiAgICAgICJuZXh0X3BhZ2VfdG9rZW4iOiAiZXlKdmJuTWlPaUl4TURBME1TSXNJbVpqSWpvaVJXOXpRa05yZUVKUk1VSXpZVzF3VlZkR1pIQlNiVkpRVlVWYVYyRjZWbXhsYm5CbVlqSk9lbVJ0WkZwa1dGSXpZMnhDTkV4WVpIRlRNRVoxVmxWYWVrOVZPSGhhUmxKbVkyMVZNRlZZVmpWTlZUbFVVM3BvUldWWFJqTlVNMG8yVkhwQ2RsTXpXbXhPU0ZwWlJXaGtWbVJIT1ZwWGF6azJWVVYwZUZVeFFqTlpiWFJSVDFWd1JFNTZVa0pVVW05cFVWVmFaazVyTVVKVlJGSllXVlpyTVZWNlVrTlZiVmw2VVd4R01tSklaSEZhUmtveFkxZDNOR1JxUlhkUlVTSXNJbVpqZGlJNklqTWlMQ0psYVNJNklsVjBiMWxhVDNwUVMzRlRVSGRpYTFBNVNrTTNORUZOSWl3aWNXTWlPaUpqTFZCVFZHbDRURXhWY0UxVU1WVnZVMk13ZEVGTVNrdFRiM1JUUmxSTWVrWkNTa3hwTUhWQlZrVnJSbWxLVDFadFJtVmhWMFpSY0hkR1FYSlZia1JVUkdkQklpd2ljWFZsYzNScGIyNGlPaUpJYjNjZ2QyRnliU0JwY3lCQmRYTjBhVzRnVkdWNFlYTWdhVzRnU21GdWRXRnllVDhpTENKc2F5STZJa2RwVG05aU0yTm5aREpHZVdKVFFuQmplVUpvWkZoT01HRlhOR2RrUjFZMFdWaE5aMkZYTkdkaGJVWjFaRmRHZVdWUklpd2lZbk1pT2lKakxWQlROVGxKUzNvd1ozTlZZMmR6Vm1scVNsTkdWa2w2Y3psS1UxTXdkVlZqYWs1NmVYWktWVTFxVFZVelFYTk1VelJDVldsSGNFWlpia1k1YUVsSWRtSm9NSFZPVVRscGVGYzRSWFpPUzBVMGMzRkdVa2xXTUhaUWVsVjRVa3ROYms1VVJsVnllVVpqYjNscGVrNU1iMGh5YzBwaVdsbGpNbXg1Y1ZocWEyeDVkVlZLZUdKc1ozRjRRVTVuTVd0UGRGRlpaVFJyU0ZGc2VFZFlUSEJuYkRSRVRubHJPVlJ4UlhoT1RFRk1jRk5SU3pWQ09ERnphRnBCU1dVMGJuQnlRVXROUVVFaUxDSnBaQ0k2SW1aalh6RWlmUT09IiwKICAgICAgInNlcnBhcGlfbGluayI6ICJodHRwczovL3NlcnBhcGkuY29tL3NlYXJjaC5qc29uP2RldmljZT1kZXNrdG9wJmVuZ2luZT1nb29nbGVfcmVsYXRlZF9xdWVzdGlvbnMmZ29vZ2xlX2RvbWFpbj1nb29nbGUuY29tJm5leHRfcGFnZV90b2tlbj1leUp2Ym5NaU9pSXhNREEwTVNJc0ltWmpJam9pUlc5elFrTnJlRUpSTVVJellXMXdWVmRHWkhCU2JWSlFWVVZhVjJGNlZteGxibkJtWWpKT2VtUnRaRnBrV0ZJelkyeENORXhZWkhGVE1FWjFWbFZhZWs5Vk9IaGFSbEptWTIxVk1GVllWalZOVlRsVVUzcG9SV1ZYUmpOVU0wbzJWSHBDZGxNeldteE9TRnBaUldoa1ZtUkhPVnBYYXprMlZVVjBlRlV4UWpOWmJYUlJUMVZ3UkU1NlVrSlVVbTlwVVZWYVprNXJNVUpWUkZKWVdWWnJNVlY2VWtOVmJWbDZVV3hHTW1KSVpIRmFSa294WTFkM05HUnFSWGRSVVNJc0ltWmpkaUk2SWpNaUxDSmxhU0k2SWxWMGIxbGFUM3BRUzNGVFVIZGlhMUE1U2tNM05FRk5JaXdpY1dNaU9pSmpMVkJUVkdsNFRFeFZjRTFVTVZWdlUyTXdkRUZNU2t0VGIzUlRSbFJNZWtaQ1NreHBNSFZCVmtWclJtbEtUMVp0Um1WaFYwWlJjSGRHUVhKVmJrUlVSR2RCSWl3aWNYVmxjM1JwYjI0aU9pSkliM2NnZDJGeWJTQnBjeUJCZFhOMGFXNGdWR1Y0WVhNZ2FXNGdTbUZ1ZFdGeWVUOGlMQ0pzYXlJNklrZHBUbTlpTTJOblpESkdlV0pUUW5CamVVSm9aRmhPTUdGWE5HZGtSMVkwV1ZoTloyRlhOR2RoYlVaMVpGZEdlV1ZSSWl3aVluTWlPaUpqTFZCVE5UbEpTM293WjNOVlkyZHpWbWxxU2xOR1ZrbDZjemxLVTFNd2RWVmphazU2ZVhaS1ZVMXFUVlV6UVhOTVV6UkNWV2xIY0VaWmJrWTVhRWxJZG1Kb01IVk9VVGxwZUZjNFJYWk9TMFUwYzNGR1VrbFdNSFpRZWxWNFVrdE5iazVVUmxWeWVVWmpiM2xwZWs1TWIwaHljMHBpV2xsak1teDVjVmhxYTJ4NWRWVktlR0pzWjNGNFFVNW5NV3RQZEZGWlpUUnJTRkZzZUVkWVRIQm5iRFJFVG5sck9WUnhSWGhPVEVGTWNGTlJTelZDT0RGemFGcEJTV1UwYm5CeVFVdE5RVUVpTENKcFpDSTZJbVpqWHpFaWZRJTNEJTNEIgogICAgfSwKICAgIHsKICAgICAgInF1ZXN0aW9uIjogIldoYXQgdGltZSBvZiB5ZWFyIGlzIGJlc3QgdG8gdmlzaXQgQXVzdGluIFRYPyIsCiAgICAgICJzbmlwcGV0IjogIkFsbCB0aGluZ3MgY29uc2lkZXJlZCwgdGhlIGJlc3QgdGltZSB0byB2aXNpdCBBdXN0aW4gaXMgaW4gdGhlIHNwcmluZyAoTWFyY2gtTWF5KSBhbmQgZmFsbCAoU2VwdGVtYmVyLU9jdG9iZXIpLiBUaGlzIGlzIHRoZSBtb3N0IGNvbWZvcnRhYmxlIHBlcmlvZCwgd2VhdGhlciBhbmQgdGVtcGVyYXR1cmUtd2lzZSwgYW5kIHRoZXJlJ3Mgc28gbXVjaCBnb2luZyBvbiBpbiB0aGUgY2l0eS4gSXQncyB3YXJtIGVub3VnaCBmb3Igc3VtbWVyIHdlYXIgYnV0IG5vdCBhcyBob3QgYW5kIGh1bWlkIGFzIHRoZSBoZWlnaHQgb2Ygc3VtbWVydGltZS4iLAogICAgICAidGl0bGUiOiAiVGhlIEJlc3QgVGltZSB0byBWaXNpdCBBdXN0aW4gaW4gMjAyMyAtIFRyYXZlbGxlcnMgV29ybGR3aWRlIiwKICAgICAgImRhdGUiOiAiRGVjIDEyLCAyMDIyIiwKICAgICAgImxpbmsiOiAiaHR0cHM6Ly90cmF2ZWxsZXJzd29ybGR3aWRlLmNvbS9iZXN0LXRpbWUtdG8tdmlzaXQtYXVzdGluLyM6fjp0ZXh0PUFsbCUyMHRoaW5ncyUyMGNvbnNpZGVyZWQlMkMlMjB0aGUlMjBiZXN0LGFzJTIwdGhlJTIwaGVpZ2h0JTIwb2YlMjBzdW1tZXJ0aW1lLiIsCiAgICAgICJkaXNwbGF5ZWRfbGluayI6ICJodHRwczovL3RyYXZlbGxlcnN3b3JsZHdpZGUuY29tIOKAuiBiZXN0LXRpbWUtdG8tdmlzaXQtYXVzdGluIiwKICAgICAgIm5leHRfcGFnZV90b2tlbiI6ICJleUp2Ym5NaU9pSXhNREEwTVNJc0ltWmpJam9pUlc5elFrTnJlRUpSTVVJellXMXdWVmRHWkhCU2JWSlFWVVZhVjJGNlZteGxibkJtWWpKT2VtUnRaRnBrV0ZJelkyeENORXhZWkhGVE1FWjFWbFZhZWs5Vk9IaGFSbEptWTIxVk1GVllWalZOVlRsVVUzcG9SV1ZYUmpOVU0wbzJWSHBDZGxNeldteE9TRnBaUldoa1ZtUkhPVnBYYXprMlZVVjBlRlV4UWpOWmJYUlJUMVZ3UkU1NlVrSlVVbTlwVVZWYVprNXJNVUpWUkZKWVdWWnJNVlY2VWtOVmJWbDZVV3hHTW1KSVpIRmFSa294WTFkM05HUnFSWGRSVVNJc0ltWmpkaUk2SWpNaUxDSmxhU0k2SWxWMGIxbGFUM3BRUzNGVFVIZGlhMUE1U2tNM05FRk5JaXdpY1dNaU9pSmpMVkJUVkdsNFRFeFZjRTFVTVZWdlUyTXdkRUZNU2t0VGIzUlRSbFJNZWtaQ1NreHBNSFZCVmtWclJtbEtUMVp0Um1WaFYwWlJjSGRHUVhKVmJrUlVSR2RCSWl3aWNYVmxjM1JwYjI0aU9pSlhhR0YwSUhScGJXVWdiMllnZVdWaGNpQnBjeUJpWlhOMElIUnZJSFpwYzJsMElFRjFjM1JwYmlCVVdEOGlMQ0pzYXlJNklrZHBVbWxhV0U0d1NVaFNjR0pYVldkaU1sbG5aVmRXYUdOcFFqQmllVUl5WVZoT2NHUkRRbWhrV0U0d1lWYzBaMlJJWnlJc0ltSnpJam9pWXkxUVV6VTVTVXQ2TUdkelZXTm5jMVpwYWtwVFJsWkplbk01U2xOVE1IVlZZMnBPZW5sMlNsVk5hazFWTTBGelRGTTBRbFZwUjNCR1dXNUdPV2hKU0haaWFEQjFUbEU1YVhoWE9FVjJUa3RGTkhOeFJsSkpWakIyVUhwVmVGSkxUVzVPVkVaVmNubEdZMjk1YVhwT1RHOUljbk5LWWxwWll6SnNlWEZZYW10c2VYVlZTbmhpYkdkeGVFRk9aekZyVDNSUldXVTBhMGhSYkhoSFdFeHdaMncwUkU1NWF6bFVjVVY0VGt4QlRIQlRVVXMxUWpneGMyaGFRVWxsTkc1d2NrRkxUVUZCSWl3aWFXUWlPaUptWTE4eEluMD0iLAogICAgICAic2VycGFwaV9saW5rIjogImh0dHBzOi8vc2VycGFwaS5jb20vc2VhcmNoLmpzb24/ZGV2aWNlPWRlc2t0b3AmZW5naW5lPWdvb2dsZV9yZWxhdGVkX3F1ZXN0aW9ucyZnb29nbGVfZG9tYWluPWdvb2dsZS5jb20mbmV4dF9wYWdlX3Rva2VuPWV5SnZibk1pT2lJeE1EQTBNU0lzSW1aaklqb2lSVzl6UWtOcmVFSlJNVUl6WVcxd1ZWZEdaSEJTYlZKUVZVVmFWMkY2Vm14bGJuQm1ZakpPZW1SdFpGcGtXRkl6WTJ4Q05FeFlaSEZUTUVaMVZsVmFlazlWT0hoYVJsSm1ZMjFWTUZWWVZqVk5WVGxVVTNwb1JXVlhSak5VTTBvMlZIcENkbE16V214T1NGcFpSV2hrVm1SSE9WcFhhemsyVlVWMGVGVXhRak5aYlhSUlQxVndSRTU2VWtKVVVtOXBVVlZhWms1ck1VSlZSRkpZV1Zack1WVjZVa05WYlZsNlVXeEdNbUpJWkhGYVJrb3hZMWQzTkdScVJYZFJVU0lzSW1aamRpSTZJak1pTENKbGFTSTZJbFYwYjFsYVQzcFFTM0ZUVUhkaWExQTVTa00zTkVGTklpd2ljV01pT2lKakxWQlRWR2w0VEV4VmNFMVVNVlZ2VTJNd2RFRk1Ta3RUYjNSVFJsUk1la1pDU2t4cE1IVkJWa1ZyUm1sS1QxWnRSbVZoVjBaUmNIZEdRWEpWYmtSVVJHZEJJaXdpY1hWbGMzUnBiMjRpT2lKWGFHRjBJSFJwYldVZ2IyWWdlV1ZoY2lCcGN5QmlaWE4wSUhSdklIWnBjMmwwSUVGMWMzUnBiaUJVV0Q4aUxDSnNheUk2SWtkcFVtbGFXRTR3U1VoU2NHSlhWV2RpTWxsblpWZFdhR05wUWpCaWVVSXlZVmhPY0dSRFFtaGtXRTR3WVZjMFoyUklaeUlzSW1Keklqb2lZeTFRVXpVNVNVdDZNR2R6VldObmMxWnBha3BUUmxaSmVuTTVTbE5UTUhWVlkycE9lbmwyU2xWTmFrMVZNMEZ6VEZNMFFsVnBSM0JHV1c1R09XaEpTSFppYURCMVRsRTVhWGhYT0VWMlRrdEZOSE54UmxKSlZqQjJVSHBWZUZKTFRXNU9WRVpWY25sR1kyOTVhWHBPVEc5SWNuTktZbHBaWXpKc2VYRllhbXRzZVhWVlNuaGliR2R4ZUVGT1p6RnJUM1JSV1dVMGEwaFJiSGhIV0V4d1oydzBSRTU1YXpsVWNVVjRUa3hCVEhCVFVVczFRamd4YzJoYVFVbGxORzV3Y2tGTFRVRkJJaXdpYVdRaU9pSm1ZMTh4SW4wJTNEIgogICAgfQogIF0sCiAgIm9yZ2FuaWNfcmVzdWx0cyI6IFsKICAgIHsKICAgICAgInBvc2l0aW9uIjogMSwKICAgICAgInRpdGxlIjogIkF1c3RpbiBKYW51YXJ5IFdlYXRoZXIsIEF2ZXJhZ2UgVGVtcGVyYXR1cmUgKFRleGFzLCBVbml0ZWQgLi4uIiwKICAgICAgImxpbmsiOiAiaHR0cHM6Ly93ZWF0aGVyc3BhcmsuY29tL20vODAwNC8xL0F2ZXJhZ2UtV2VhdGhlci1pbi1KYW51YXJ5LWluLUF1c3Rpbi1UZXhhcy1Vbml0ZWQtU3RhdGVzIiwKICAgICAgImRpc3BsYXllZF9saW5rIjogImh0dHBzOi8vd2VhdGhlcnNwYXJrLmNvbSDigLogLi4uIOKAuiBUZXhhcyDigLogQXVzdGluIiwKICAgICAgInNuaXBwZXQiOiAiSmFudWFyeSBXZWF0aGVyIGluIEF1c3RpbiBUZXhhcywgVW5pdGVkIFN0YXRlcy4gRGFpbHkgaGlnaCB0ZW1wZXJhdHVyZXMgaW5jcmVhc2UgYnkgMsKwRiwgZnJvbSA2MsKwRiB0byA2NMKwRiwgcmFyZWx5IGZhbGxpbmcgYmVsb3cgNDXCsEYgb3IgZXhjZWVkaW5nIDc2wrAgLi4uIiwKICAgICAgInNuaXBwZXRfaGlnaGxpZ2h0ZWRfd29yZHMiOiBbCiAgICAgICAgIkRhaWx5IGhpZ2ggdGVtcGVyYXR1cmVzIGluY3JlYXNlIGJ5IDLCsEYsIGZyb20gNjLCsEYgdG8gNjTCsEYiCiAgICAgIF0sCiAgICAgICJhYm91dF90aGlzX3Jlc3VsdCI6IHsKICAgICAgICAic291cmNlIjogewogICAgICAgICAgImRlc2NyaXB0aW9uIjogIndlYXRoZXJzcGFyay5jb20gd2FzIGZpcnN0IGluZGV4ZWQgYnkgR29vZ2xlIG1vcmUgdGhhbiAxMCB5ZWFycyBhZ28iLAogICAgICAgICAgInNvdXJjZV9pbmZvX2xpbmsiOiAiaHR0cHM6Ly93ZWF0aGVyc3BhcmsuY29tL20vODAwNC8xL0F2ZXJhZ2UtV2VhdGhlci1pbi1KYW51YXJ5LWluLUF1c3Rpbi1UZXhhcy1Vbml0ZWQtU3RhdGVzIiwKICAgICAgICAgICJzZWN1cml0eSI6ICJzZWN1cmUiLAogICAgICAgICAgImljb24iOiAiaHR0cHM6Ly9zZXJwYXBpLmNvbS9zZWFyY2hlcy82NDE4ZGE1MGVmN2RkYWQ1NzRhZmI4YmIvaW1hZ2VzLzQxOWNkYjA5NDY4MjVlMmEwMGU4MTFiMmNiYmMxMzg2NDhhOTViODc4YjI0M2E1ZjIzODE2M2M1NWJkZTViMGE5ZGRmODUzYjQzMjYxMjJhMWE2OTUxMTIxODg0NzhmOC5wbmciCiAgICAgICAgfQogICAgICB9LAogICAgICAiYWJvdXRfcGFnZV9saW5rIjogImh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vc2VhcmNoP3E9QWJvdXQraHR0cHM6Ly93ZWF0aGVyc3BhcmsuY29tL20vODAwNC8xL0F2ZXJhZ2UtV2VhdGhlci1pbi1KYW51YXJ5LWluLUF1c3Rpbi1UZXhhcy1Vbml0ZWQtU3RhdGVzJnRibT1pbHAmaWxwcz1BQl9MaDNvaDZicHlJMHpqRXozZTI3SldLUGFOWjFHNGdRIiwKICAgICAgImFib3V0X3BhZ2Vfc2VycGFwaV9saW5rIjogImh0dHBzOi8vc2VycGFwaS5jb20vc2VhcmNoLmpzb24/ZW5naW5lPWdvb2dsZV9hYm91dF90aGlzX3Jlc3VsdCZnb29nbGVfZG9tYWluPWdvb2dsZS5jb20maWxwcz1BQl9MaDNvaDZicHlJMHpqRXozZTI3SldLUGFOWjFHNGdRJnE9QWJvdXQraHR0cHMlM0ElMkYlMkZ3ZWF0aGVyc3BhcmsuY29tJTJGbSUyRjgwMDQlMkYxJTJGQXZlcmFnZS1XZWF0aGVyLWluLUphbnVhcnktaW4tQXVzdGluLVRleGFzLVVuaXRlZC1TdGF0ZXMiLAogICAgICAiY2FjaGVkX3BhZ2VfbGluayI6ICJodHRwczovL3dlYmNhY2hlLmdvb2dsZXVzZXJjb250ZW50LmNvbS9zZWFyY2g/cT1jYWNoZToxY2YwaUd4eDBKNEo6aHR0cHM6Ly93ZWF0aGVyc3BhcmsuY29tL20vODAwNC8xL0F2ZXJhZ2UtV2VhdGhlci1pbi1KYW51YXJ5LWluLUF1c3Rpbi1UZXhhcy1Vbml0ZWQtU3RhdGVzJmNkPTExJmhsPWVuJmN0PWNsbmsmZ2w9dXMiCiAgICB9LAogICAgewogICAgICAicG9zaXRpb24iOiAyLAogICAgICAidGl0bGUiOiAiQXVzdGluIFdlYXRoZXIgaW4gSmFudWFyeSAtIEN1cnJlbnQgUmVzdWx0cyIsCiAgICAgICJsaW5rIjogImh0dHBzOi8vd3d3LmN1cnJlbnRyZXN1bHRzLmNvbS9XZWF0aGVyL1RleGFzL1BsYWNlcy9hdXN0aW4td2VhdGhlci1pbi1qYW51YXJ5LnBocCIsCiAgICAgICJkaXNwbGF5ZWRfbGluayI6ICJodHRwczovL3d3dy5jdXJyZW50cmVzdWx0cy5jb20g4oC6IFRleGFzIOKAuiBQbGFjZXMg4oC6IGF1c3QuLi4iLAogICAgICAic25pcHBldCI6ICJUaGV5IGhhdmUgZGFpbHkgaGlnaHMgYXZlcmFnaW5nIDYyIGRlZ3JlZXMgRmFocmVuaGVpdCAoMTcgZGVncmVlcyBDZWxzaXVzKSBhbmQgbG93cyBvZiA0MSDCsEYgKDUgwrBDKS4gLi4uIFRoZSB0ZW1wZXJhdHVyZSByaXNlcyBtb3N0IGRheXMgZHVyaW5nIEphbnVhcnkgdG8gb3ZlciA1MCAuLi4iLAogICAgICAic25pcHBldF9oaWdobGlnaHRlZF93b3JkcyI6IFsKICAgICAgICAiNjIgZGVncmVlcyBGYWhyZW5oZWl0ICgxNyBkZWdyZWVzIENlbHNpdXMiCiAgICAgIF0sCiAgICAgICJhYm91dF90aGlzX3Jlc3VsdCI6IHsKICAgICAgICAic291cmNlIjogewogICAgICAgICAgImRlc2NyaXB0aW9uIjogImN1cnJlbnRyZXN1bHRzLmNvbSB3YXMgZmlyc3QgaW5kZXhlZCBieSBHb29nbGUgbW9yZSB0aGFuIDEwIHllYXJzIGFnbyIsCiAgICAgICAgICAic291cmNlX2luZm9fbGluayI6ICJodHRwczovL3d3dy5jdXJyZW50cmVzdWx0cy5jb20vV2VhdGhlci9UZXhhcy9QbGFjZXMvYXVzdGluLXdlYXRoZXItaW4tamFudWFyeS5waHAiLAogICAgICAgICAgInNlY3VyaXR5IjogInNlY3VyZSIsCiAgICAgICAgICAiaWNvbiI6ICJodHRwczovL3NlcnBhcGkuY29tL3NlYXJjaGVzLzY0MThkYTUwZWY3ZGRhZDU3NGFmYjhiYi9pbWFnZXMvNDE5Y2RiMDk0NjgyNWUyYTAwZTgxMWIyY2JiYzEzODY5Y2QwMjk0NmI4ZTcxZDJiMTcyMzhjZDczNzQxNGZiMWM0NDM4NWI1NzhkNWUzY2QxMzkxMTg1ZGUyYmQzNjBlLnBuZyIKICAgICAgICB9CiAgICAgIH0sCiAgICAgICJhYm91dF9wYWdlX2xpbmsiOiAiaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9zZWFyY2g/cT1BYm91dCtodHRwczovL3d3dy5jdXJyZW50cmVzdWx0cy5jb20vV2VhdGhlci9UZXhhcy9QbGFjZXMvYXVzdGluLXdlYXRoZXItaW4tamFudWFyeS5waHAmdGJtPWlscCZpbHBzPUFCX0xoM3A0WmE0alUyaDNjZE5VXzVWZ21MTThIRzNqZXciLAogICAgICAiYWJvdXRfcGFnZV9zZXJwYXBpX2xpbmsiOiAiaHR0cHM6Ly9zZXJwYXBpLmNvbS9zZWFyY2guanNvbj9lbmdpbmU9Z29vZ2xlX2Fib3V0X3RoaXNfcmVzdWx0Jmdvb2dsZV9kb21haW49Z29vZ2xlLmNvbSZpbHBzPUFCX0xoM3A0WmE0alUyaDNjZE5VXzVWZ21MTThIRzNqZXcmcT1BYm91dCtodHRwcyUzQSUyRiUyRnd3dy5jdXJyZW50cmVzdWx0cy5jb20lMkZXZWF0aGVyJTJGVGV4YXMlMkZQbGFjZXMlMkZhdXN0aW4td2VhdGhlci1pbi1qYW51YXJ5LnBocCIsCiAgICAgICJjYWNoZWRfcGFnZV9saW5rIjogImh0dHBzOi8vd2ViY2FjaGUuZ29vZ2xldXNlcmNvbnRlbnQuY29tL3NlYXJjaD9xPWNhY2hlOnhzOXl5TVl4V040SjpodHRwczovL3d3dy5jdXJyZW50cmVzdWx0cy5jb20vV2VhdGhlci9UZXhhcy9QbGFjZXMvYXVzdGluLXdlYXRoZXItaW4tamFudWFyeS5waHAmY2Q9MTImaGw9ZW4mY3Q9Y2xuayZnbD11cyIsCiAgICAgICJyZWxhdGVkX3BhZ2VzX2xpbmsiOiAiaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9zZWFyY2g/cT1yZWxhdGVkOmh0dHBzOi8vd3d3LmN1cnJlbnRyZXN1bHRzLmNvbS9XZWF0aGVyL1RleGFzL1BsYWNlcy9hdXN0aW4td2VhdGhlci1pbi1qYW51YXJ5LnBocCtBdmVyYWdlK3RlbXBlcmF0dXJlK2luK0F1c3RpbitUWCtpbitKYW51YXJ5IiwKICAgICAgInJlbGF0ZWRfcmVzdWx0cyI6IFsKICAgICAgICB7CiAgICAgICAgICAicG9zaXRpb24iOiAxLAogICAgICAgICAgInRpdGxlIjogIkF1c3RpbiBUWCBBdmVyYWdlIFRlbXBlcmF0dXJlcyBieSBNb250aCAtIEN1cnJlbnQgUmVzdWx0cyIsCiAgICAgICAgICAibGluayI6ICJodHRwczovL3d3dy5jdXJyZW50cmVzdWx0cy5jb20vV2VhdGhlci9UZXhhcy9QbGFjZXMvYXVzdGluLXRlbXBlcmF0dXJlcy1ieS1tb250aC1hdmVyYWdlLnBocCIsCiAgICAgICAgICAiZGlzcGxheWVkX2xpbmsiOiAiaHR0cHM6Ly93d3cuY3VycmVudHJlc3VsdHMuY29tIOKAuiBUZXhhcyDigLogUGxhY2VzIOKAuiBhdXN0Li4uIiwKICAgICAgICAgICJzbmlwcGV0IjogIk5lYXJseSBoYWxmIG9mIHdpbnRlciBuaWdodHMgaW4gQXVzdGluIGRpcCB0byA0MCDCsEYgb3IgbGVzcy4gT24gYXZlcmFnZSwgdHdvIG5pZ2h0cyBhIGRlY2FkZSBkcm9wIGFzIGxvdyBhcyAyMCBkZWdyZWVzICgtOCDCsEMpLiBBdXN0aW4gbm9ybWFsbHkgc2VlcyBqdXN0IG9uZSAuLi4iLAogICAgICAgICAgInNuaXBwZXRfaGlnaGxpZ2h0ZWRfd29yZHMiOiBbCiAgICAgICAgICAgICI0MCDCsEYgb3IgbGVzcyIKICAgICAgICAgIF0sCiAgICAgICAgICAiYWJvdXRfdGhpc19yZXN1bHQiOiB7CiAgICAgICAgICAgICJzb3VyY2UiOiB7CiAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogImN1cnJlbnRyZXN1bHRzLmNvbSB3YXMgZmlyc3QgaW5kZXhlZCBieSBHb29nbGUgbW9yZSB0aGFuIDEwIHllYXJzIGFnbyIsCiAgICAgICAgICAgICAgInNvdXJjZV9pbmZvX2xpbmsiOiAiaHR0cHM6Ly93d3cuY3VycmVudHJlc3VsdHMuY29tL1dlYXRoZXIvVGV4YXMvUGxhY2VzL2F1c3Rpbi10ZW1wZXJhdHVyZXMtYnktbW9udGgtYXZlcmFnZS5waHAiLAogICAgICAgICAgICAgICJzZWN1cml0eSI6ICJzZWN1cmUiLAogICAgICAgICAgICAgICJpY29uIjogImh0dHBzOi8vc2VycGFwaS5jb20vc2VhcmNoZXMvNjQxOGRhNTBlZjdkZGFkNTc0YWZiOGJiL2ltYWdlcy80MTljZGIwOTQ2ODI1ZTJhMDBlODExYjJjYmJjMTM4NmNkM2E0NjYxZWQ5ZDQxMzM1OTA3ODY4OTE0NmM1ZGQzMzdlMDQ4OWFkODljOWE5NTMwYjJiY2NjYTMzNmY3NmFjM2JkNzdhYzFmOGVlODM4NmUzMDM2ZjY4YmFkMDIzYTlhNWQ0YzMxMzVkZDc2MTAucG5nIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgImFib3V0X3BhZ2VfbGluayI6ICJodHRwczovL3d3dy5nb29nbGUuY29tL3NlYXJjaD9xPUFib3V0K2h0dHBzOi8vd3d3LmN1cnJlbnRyZXN1bHRzLmNvbS9XZWF0aGVyL1RleGFzL1BsYWNlcy9hdXN0aW4tdGVtcGVyYXR1cmVzLWJ5LW1vbnRoLWF2ZXJhZ2UucGhwJnRibT1pbHAmaWxwcz1BQl9MaDNwREpWUjN5VUVWOVVjVDRUNXpDalVvc184eGZnIiwKICAgICAgICAgICJhYm91dF9wYWdlX3NlcnBhcGlfbGluayI6ICJodHRwczovL3NlcnBhcGkuY29tL3NlYXJjaC5qc29uP2VuZ2luZT1nb29nbGVfYWJvdXRfdGhpc19yZXN1bHQmZ29vZ2xlX2RvbWFpbj1nb29nbGUuY29tJmlscHM9QUJfTGgzcERKVlIzeVVFVjlVY1Q0VDV6Q2pVb3NfOHhmZyZxPUFib3V0K2h0dHBzJTNBJTJGJTJGd3d3LmN1cnJlbnRyZXN1bHRzLmNvbSUyRldlYXRoZXIlMkZUZXhhcyUyRlBsYWNlcyUyRmF1c3Rpbi10ZW1wZXJhdHVyZXMtYnktbW9udGgtYXZlcmFnZS5waHAiLAogICAgICAgICAgImNhY2hlZF9wYWdlX2xpbmsiOiAiaHR0cHM6Ly93ZWJjYWNoZS5nb29nbGV1c2VyY29udGVudC5jb20vc2VhcmNoP3E9Y2FjaGU6X0J5aXVQVnlMeUFKOmh0dHBzOi8vd3d3LmN1cnJlbnRyZXN1bHRzLmNvbS9XZWF0aGVyL1RleGFzL1BsYWNlcy9hdXN0aW4tdGVtcGVyYXR1cmVzLWJ5LW1vbnRoLWF2ZXJhZ2UucGhwJmNkPTEzJmhsPWVuJmN0PWNsbmsmZ2w9dXMiLAogICAgICAgICAgInJlbGF0ZWRfcGFnZXNfbGluayI6ICJodHRwczovL3d3dy5nb29nbGUuY29tL3NlYXJjaD9xPXJlbGF0ZWQ6aHR0cHM6Ly93d3cuY3VycmVudHJlc3VsdHMuY29tL1dlYXRoZXIvVGV4YXMvUGxhY2VzL2F1c3Rpbi10ZW1wZXJhdHVyZXMtYnktbW9udGgtYXZlcmFnZS5waHArQXZlcmFnZSt0ZW1wZXJhdHVyZStpbitBdXN0aW4rVFgraW4rSmFudWFyeSIKICAgICAgICB9CiAgICAgIF0KICAgIH0sCiAgICB7CiAgICAgICJwb3NpdGlvbiI6IDMsCiAgICAgICJ0aXRsZSI6ICJBdXN0aW4sIFRYIHdlYXRoZXIgaW4gSmFudWFyeTogYXZlcmFnZSB0ZW1wZXJhdHVyZSAmIGNsaW1hdGUiLAogICAgICAibGluayI6ICJodHRwczovL3dhbmRlcmxvZy5jb20vd2VhdGhlci81ODE2My8xL2F1c3Rpbi13ZWF0aGVyLWluLWphbnVhcnkiLAogICAgICAiZGlzcGxheWVkX2xpbmsiOiAiaHR0cHM6Ly93YW5kZXJsb2cuY29tIOKAuiB3ZWF0aGVyIOKAuiBhdXN0aW4td2VhdGhlci1pbi1qLi4uIiwKICAgICAgInNuaXBwZXQiOiAiVGhlIGF2ZXJhZ2UgdGVtcGVyYXR1cmUgaW4gQXVzdGluIGluIEphbnVhcnkgZm9yIGEgdHlwaWNhbCBkYXkgcmFuZ2VzIGZyb20gYSBoaWdoIG9mIDYywrBGICgxN8KwQykgdG8gYSBsb3cgb2YgMznCsEYgKDTCsEMpLiBTb21lIHdvdWxkIGRlc2NyaWJlIGl0IGFzIC4uLiIsCiAgICAgICJzbmlwcGV0X2hpZ2hsaWdodGVkX3dvcmRzIjogWwogICAgICAgICJmcm9tIGEgaGlnaCBvZiA2MsKwRiAoMTfCsEMpIHRvIGEgbG93IG9mIDM5wrBGICg0wrBDIgogICAgICBdLAogICAgICAiYWJvdXRfdGhpc19yZXN1bHQiOiB7CiAgICAgICAgInNvdXJjZSI6IHsKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJ3YW5kZXJsb2cuY29tIHdhcyBmaXJzdCBpbmRleGVkIGJ5IEdvb2dsZSBtb3JlIHRoYW4gMTAgeWVhcnMgYWdvIiwKICAgICAgICAgICJzb3VyY2VfaW5mb19saW5rIjogImh0dHBzOi8vd2FuZGVybG9nLmNvbS93ZWF0aGVyLzU4MTYzLzEvYXVzdGluLXdlYXRoZXItaW4tamFudWFyeSIsCiAgICAgICAgICAic2VjdXJpdHkiOiAic2VjdXJlIiwKICAgICAgICAgICJpY29uIjogImh0dHBzOi8vc2VycGFwaS5jb20vc2VhcmNoZXMvNjQxOGRhNTBlZjdkZGFkNTc0YWZiOGJiL2ltYWdlcy80MTljZGIwOTQ2ODI1ZTJhMDBlODExYjJjYmJjMTM4NjliMzA5MGQ0YzQwNjc2YTExNzUyNThmZTM4NzAwNmE1NTc5NGE3OGZmMzViNjMyZTk2ZTQ3YTRiZjhkYjJlZTMucG5nIgogICAgICAgIH0KICAgICAgfSwKICAgICAgImFib3V0X3BhZ2VfbGluayI6ICJodHRwczovL3d3dy5nb29nbGUuY29tL3NlYXJjaD9xPUFib3V0K2h0dHBzOi8vd2FuZGVybG9nLmNvbS93ZWF0aGVyLzU4MTYzLzEvYXVzdGluLXdlYXRoZXItaW4tamFudWFyeSZ0Ym09aWxwJmlscHM9QUJfTGgzcFRMZGlTLXZrbEduOExwdkI4ZHd6OU1oZEFPQSIsCiAgICAgICJhYm91dF9wYWdlX3NlcnBhcGlfbGluayI6ICJodHRwczovL3NlcnBhcGkuY29tL3NlYXJjaC5qc29uP2VuZ2luZT1nb29nbGVfYWJvdXRfdGhpc19yZXN1bHQmZ29vZ2xlX2RvbWFpbj1nb29nbGUuY29tJmlscHM9QUJfTGgzcFRMZGlTLXZrbEduOExwdkI4ZHd6OU1oZEFPQSZxPUFib3V0K2h0dHBzJTNBJTJGJTJGd2FuZGVybG9nLmNvbSUyRndlYXRoZXIlMkY1ODE2MyUyRjElMkZhdXN0aW4td2VhdGhlci1pbi1qYW51YXJ5IiwKICAgICAgImNhY2hlZF9wYWdlX2xpbmsiOiAiaHR0cHM6Ly93ZWJjYWNoZS5nb29nbGV1c2VyY29udGVudC5jb20vc2VhcmNoP3E9Y2FjaGU6V1dXSE91QkFySndKOmh0dHBzOi8vd2FuZGVybG9nLmNvbS93ZWF0aGVyLzU4MTYzLzEvYXVzdGluLXdlYXRoZXItaW4tamFudWFyeSZjZD0xNCZobD1lbiZjdD1jbG5rJmdsPXVzIgogICAgfSwKICAgIHsKICAgICAgInBvc2l0aW9uIjogNCwKICAgICAgInRpdGxlIjogIkF1c3RpbiwgVFggTW9udGhseSBXZWF0aGVyIC0gQWNjdVdlYXRoZXIiLAogICAgICAibGluayI6ICJodHRwczovL3d3dy5hY2N1d2VhdGhlci5jb20vZW4vdXMvYXVzdGluLzc4NzAxL2phbnVhcnktd2VhdGhlci8zNTExOTMiLAogICAgICAiZGlzcGxheWVkX2xpbmsiOiAiaHR0cHM6Ly93d3cuYWNjdXdlYXRoZXIuY29tIOKAuiBqYW51YXJ5LXdlYXRoZXIiLAogICAgICAic25pcHBldCI6ICJEYWlseSA7IDEuIDc5wrAuIDUwwrAgOyAyLiA4M8KwLiA2OcKwIDsgMy4gNzTCsC4gNTTCsCA7IDQuIDc0wrAuIDQywrAgOyA1LiA2OcKwLiA0McKwLiIsCiAgICAgICJzbmlwcGV0X2hpZ2hsaWdodGVkX3dvcmRzIjogWwogICAgICAgICI3OcKwLiA1MMKwIgogICAgICBdLAogICAgICAiYWJvdXRfdGhpc19yZXN1bHQiOiB7CiAgICAgICAgInNvdXJjZSI6IHsKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJBY2N1V2VhdGhlciBJbmMuIGlzIGFuIEFtZXJpY2FuIG1lZGlhIGNvbXBhbnkgdGhhdCBwcm92aWRlcyBjb21tZXJjaWFsIHdlYXRoZXIgZm9yZWNhc3Rpbmcgc2VydmljZXMgd29ybGR3aWRlLlxuQWNjdVdlYXRoZXIgd2FzIGZvdW5kZWQgaW4gMTk2MiBieSBKb2VsIE4uIE15ZXJzLCB0aGVuIGEgUGVubnN5bHZhbmlhIFN0YXRlIFVuaXZlcnNpdHkgZ3JhZHVhdGUgc3R1ZGVudCB3b3JraW5nIG9uIGEgbWFzdGVyJ3MgZGVncmVlIGluIG1ldGVvcm9sb2d5LiBIaXMgZmlyc3QgY3VzdG9tZXIgd2FzIGEgZ2FzIGNvbXBhbnkgaW4gUGVubnN5bHZhbmlhLiIsCiAgICAgICAgICAic291cmNlX2luZm9fbGluayI6ICJodHRwczovL3d3dy5hY2N1d2VhdGhlci5jb20vZW4vdXMvYXVzdGluLzc4NzAxL2phbnVhcnktd2VhdGhlci8zNTExOTMiLAogICAgICAgICAgInNlY3VyaXR5IjogInNlY3VyZSIsCiAgICAgICAgICAiaWNvbiI6ICJodHRwczovL3NlcnBhcGkuY29tL3NlYXJjaGVzLzY0MThkYTUwZWY3ZGRhZDU3NGFmYjhiYi9pbWFnZXMvNDE5Y2RiMDk0NjgyNWUyYTAwZTgxMWIyY2JiYzEzODYzOTliYmYyMTJlY2EzMjVjZThkYzM4MGMwNDQ4ODdhODY5OTgwOGU4MmZiYTU4NmY4YTZhODEwYWM0MWM5MjU1LnBuZyIKICAgICAgICB9CiAgICAgIH0sCiAgICAgICJhYm91dF9wYWdlX2xpbmsiOiAiaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9zZWFyY2g/cT1BYm91dCtodHRwczovL3d3dy5hY2N1d2VhdGhlci5jb20vZW4vdXMvYXVzdGluLzc4NzAxL2phbnVhcnktd2VhdGhlci8zNTExOTMmdGJtPWlscCZpbHBzPUFCX0xoM3I4dW9rblNTbUo1YVBndXVTRlA5LUhuX0RiWnciLAogICAgICAiYWJvdXRfcGFnZV9zZXJwYXBpX2xpbmsiOiAiaHR0cHM6Ly9zZXJwYXBpLmNvbS9zZWFyY2guanNvbj9lbmdpbmU9Z29vZ2xlX2Fib3V0X3RoaXNfcmVzdWx0Jmdvb2dsZV9kb21haW49Z29vZ2xlLmNvbSZpbHBzPUFCX0xoM3I4dW9rblNTbUo1YVBndXVTRlA5LUhuX0RiWncmcT1BYm91dCtodHRwcyUzQSUyRiUyRnd3dy5hY2N1d2VhdGhlci5jb20lMkZlbiUyRnVzJTJGYXVzdGluJTJGNzg3MDElMkZqYW51YXJ5LXdlYXRoZXIlMkYzNTExOTMiLAogICAgICAiY2FjaGVkX3BhZ2VfbGluayI6ICJodHRwczovL3dlYmNhY2hlLmdvb2dsZXVzZXJjb250ZW50LmNvbS9zZWFyY2g/cT1jYWNoZTp5dVF0TWpjakl3SUo6aHR0cHM6Ly93d3cuYWNjdXdlYXRoZXIuY29tL2VuL3VzL2F1c3Rpbi83ODcwMS9qYW51YXJ5LXdlYXRoZXIvMzUxMTkzJmNkPTE1JmhsPWVuJmN0PWNsbmsmZ2w9dXMiCiAgICB9LAogICAgewogICAgICAicG9zaXRpb24iOiA1LAogICAgICAidGl0bGUiOiAiSmFudWFyeSB3ZWF0aGVyIGZvcmVjYXN0IEF1c3RpbiwgVFgiLAogICAgICAibGluayI6ICJodHRwczovL3d3dy53ZWF0aGVyLXVzLmNvbS9lbi90ZXhhcy11c2EvYXVzdGluLXdlYXRoZXItamFudWFyeSIsCiAgICAgICJkaXNwbGF5ZWRfbGluayI6ICJodHRwczovL3d3dy53ZWF0aGVyLXVzLmNvbSDigLogLi4uIOKAuiBBdXN0aW4g4oC6IENsaW1hdGUiLAogICAgICAic25pcHBldCI6ICJJbiBBdXN0aW4sIFRleGFzLCBpbiBKYW51YXJ5LCB0aGUgYXZlcmFnZSBoaWdoLXRlbXBlcmF0dXJlIGlzIDU5LjTCsEYgKDE1LjLCsEMpLCBhbmQgdGhlIGF2ZXJhZ2UgbG93LXRlbXBlcmF0dXJlIGlzIDQyLjbCsEYgKDUuOcKwQykuIFdoYXQgaXMgdGhlIGF2ZXJhZ2UgaHVtaWRpdHkgLi4uIiwKICAgICAgInNuaXBwZXRfaGlnaGxpZ2h0ZWRfd29yZHMiOiBbCiAgICAgICAgImF2ZXJhZ2UgaGlnaC10ZW1wZXJhdHVyZSBpcyA1OS40wrBGICgxNS4ywrBDIgogICAgICBdLAogICAgICAiYWJvdXRfdGhpc19yZXN1bHQiOiB7CiAgICAgICAgInNvdXJjZSI6IHsKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJ3ZWF0aGVyLXVzLmNvbSB3YXMgZmlyc3QgaW5kZXhlZCBieSBHb29nbGUgbW9yZSB0aGFuIDEwIHllYXJzIGFnbyIsCiAgICAgICAgICAic291cmNlX2luZm9fbGluayI6ICJodHRwczovL3d3dy53ZWF0aGVyLXVzLmNvbS9lbi90ZXhhcy11c2EvYXVzdGluLXdlYXRoZXItamFudWFyeSIsCiAgICAgICAgICAic2VjdXJpdHkiOiAic2VjdXJlIiwKICAgICAgICAgICJpY29uIjogImh0dHBzOi8vc2VycGFwaS5jb20vc2VhcmNoZXMvNjQxOGRhNTBlZjdkZGFkNTc0YWZiOGJiL2ltYWdlcy80MTljZGIwOTQ2ODI1ZTJhMDBlODExYjJjYmJjMTM4NjAwOGJjZTY1NDhmY2Y5MzMwZTVkZjNkNzFhOTAxYzAyNzM2NTczM2VhNzU0NDQyMWMwODQ3Njk5NTM1NTQwMzkucG5nIgogICAgICAgIH0KICAgICAgfSwKICAgICAgImFib3V0X3BhZ2VfbGluayI6ICJodHRwczovL3d3dy5nb29nbGUuY29tL3NlYXJjaD9xPUFib3V0K2h0dHBzOi8vd3d3LndlYXRoZXItdXMuY29tL2VuL3RleGFzLXVzYS9hdXN0aW4td2VhdGhlci1qYW51YXJ5JnRibT1pbHAmaWxwcz1BQl9MaDNyMEF4dUF2alhCbUQ3aXNfaDkyWV9kOE9kQ0dnIiwKICAgICAgImFib3V0X3BhZ2Vfc2VycGFwaV9saW5rIjogImh0dHBzOi8vc2VycGFwaS5jb20vc2VhcmNoLmpzb24/ZW5naW5lPWdvb2dsZV9hYm91dF90aGlzX3Jlc3VsdCZnb29nbGVfZG9tYWluPWdvb2dsZS5jb20maWxwcz1BQl9MaDNyMEF4dUF2alhCbUQ3aXNfaDkyWV9kOE9kQ0dnJnE9QWJvdXQraHR0cHMlM0ElMkYlMkZ3d3cud2VhdGhlci11cy5jb20lMkZlbiUyRnRleGFzLXVzYSUyRmF1c3Rpbi13ZWF0aGVyLWphbnVhcnkiLAogICAgICAiY2FjaGVkX3BhZ2VfbGluayI6ICJodHRwczovL3dlYmNhY2hlLmdvb2dsZXVzZXJjb250ZW50LmNvbS9zZWFyY2g/cT1jYWNoZTptbkVnV1poWlJUc0o6aHR0cHM6Ly93d3cud2VhdGhlci11cy5jb20vZW4vdGV4YXMtdXNhL2F1c3Rpbi13ZWF0aGVyLWphbnVhcnkmY2Q9MTYmaGw9ZW4mY3Q9Y2xuayZnbD11cyIKICAgIH0sCiAgICB7CiAgICAgICJwb3NpdGlvbiI6IDYsCiAgICAgICJ0aXRsZSI6ICJXaGF0J3MgVGhlIFdlYXRoZXIgTGlrZSBJbiBBdXN0aW4/IEhlcmUncyBBIE1vbnRoLUJ5LU1vbnRoIC4uLiIsCiAgICAgICJsaW5rIjogImh0dHBzOi8vc29tdWNobGlmZS5jb20vd2hhdHMtdGhlLXdlYXRoZXItbGlrZS1pbi1hdXN0aW4taGVyZXMtYS1tb250aC1ieS1tb250aC1ndWlkZS8iLAogICAgICAiZGlzcGxheWVkX2xpbmsiOiAiaHR0cHM6Ly9zb211Y2hsaWZlLmNvbSDigLogQmxvZyIsCiAgICAgICJkYXRlIjogIkFwciAyNSwgMjAxOSIsCiAgICAgICJzbmlwcGV0IjogIkphbnVhcnkgLy8gQXZlcmFnZSBoaWdoL2xvdzogNjIvNDIuIEphbnVhcnkgaXMgdGhlIGNvbGRlc3QgbW9udGggb2YgdGhlIHllYXIgaW4gQXVzdGluLCBhbmQgb24gdGhlIHJhcmUgb2NjYXNpb25zIHdoZW4gd2UgZ2V0IHNub3cgb3IgaWNlIGluIC4uLiIsCiAgICAgICJzbmlwcGV0X2hpZ2hsaWdodGVkX3dvcmRzIjogWwogICAgICAgICJBdmVyYWdlIGhpZ2gvbG93OiA2Mi80MiIKICAgICAgXSwKICAgICAgImFib3V0X3RoaXNfcmVzdWx0IjogewogICAgICAgICJzb3VyY2UiOiB7CiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAic29tdWNobGlmZS5jb20gd2FzIGZpcnN0IGluZGV4ZWQgYnkgR29vZ2xlIG1vcmUgdGhhbiAxMCB5ZWFycyBhZ28iLAogICAgICAgICAgInNvdXJjZV9pbmZvX2xpbmsiOiAiaHR0cHM6Ly9zb211Y2hsaWZlLmNvbS93aGF0cy10aGUtd2VhdGhlci1saWtlLWluLWF1c3Rpbi1oZXJlcy1hLW1vbnRoLWJ5LW1vbnRoLWd1aWRlLyIsCiAgICAgICAgICAic2VjdXJpdHkiOiAic2VjdXJlIiwKICAgICAgICAgICJpY29uIjogImh0dHBzOi8vc2VycGFwaS5jb20vc2VhcmNoZXMvNjQxOGRhNTBlZjdkZGFkNTc0YWZiOGJiL2ltYWdlcy80MTljZGIwOTQ2ODI1ZTJhMDBlODExYjJjYmJjMTM4NjY0OWJmOTNiYmM1NWI0ZTQ0YzAyNDM0ZDY5M2MwZGFhOTYwYjdhMWJhNTZlMGUwNzNiNjM1ODE0ZTgxYTE3YmMucG5nIgogICAgICAgIH0KICAgICAgfSwKICAgICAgImFib3V0X3BhZ2VfbGluayI6ICJodHRwczovL3d3dy5nb29nbGUuY29tL3NlYXJjaD9xPUFib3V0K2h0dHBzOi8vc29tdWNobGlmZS5jb20vd2hhdHMtdGhlLXdlYXRoZXItbGlrZS1pbi1hdXN0aW4taGVyZXMtYS1tb250aC1ieS1tb250aC1ndWlkZS8mdGJtPWlscCZpbHBzPUFCX0xoM3JNeGJQY2NBNmxCWnYyMldUOVNaMm5MNjVzQUEiLAogICAgICAiYWJvdXRfcGFnZV9zZXJwYXBpX2xpbmsiOiAiaHR0cHM6Ly9zZXJwYXBpLmNvbS9zZWFyY2guanNvbj9lbmdpbmU9Z29vZ2xlX2Fib3V0X3RoaXNfcmVzdWx0Jmdvb2dsZV9kb21haW49Z29vZ2xlLmNvbSZpbHBzPUFCX0xoM3JNeGJQY2NBNmxCWnYyMldUOVNaMm5MNjVzQUEmcT1BYm91dCtodHRwcyUzQSUyRiUyRnNvbXVjaGxpZmUuY29tJTJGd2hhdHMtdGhlLXdlYXRoZXItbGlrZS1pbi1hdXN0aW4taGVyZXMtYS1tb250aC1ieS1tb250aC1ndWlkZSUyRiIsCiAgICAgICJjYWNoZWRfcGFnZV9saW5rIjogImh0dHBzOi8vd2ViY2FjaGUuZ29vZ2xldXNlcmNvbnRlbnQuY29tL3NlYXJjaD9xPWNhY2hlOk1qaHR1b0FuU2R3SjpodHRwczovL3NvbXVjaGxpZmUuY29tL3doYXRzLXRoZS13ZWF0aGVyLWxpa2UtaW4tYXVzdGluLWhlcmVzLWEtbW9udGgtYnktbW9udGgtZ3VpZGUvJmNkPTE3JmhsPWVuJmN0PWNsbmsmZ2w9dXMiCiAgICB9LAogICAgewogICAgICAicG9zaXRpb24iOiA3LAogICAgICAidGl0bGUiOiAiQ2xpbWF0ZSBpbiBBdXN0aW4gQ2l0eSwgVGV4YXMgLSByc3NXZWF0aGVyLmNvbSIsCiAgICAgICJsaW5rIjogImh0dHBzOi8vd3d3LnJzc3dlYXRoZXIuY29tL2NsaW1hdGUvVGV4YXMvQXVzdGluJTIwQ2l0eS8iLAogICAgICAiZGlzcGxheWVkX2xpbmsiOiAiaHR0cHM6Ly93d3cucnNzd2VhdGhlci5jb20g4oC6IGNsaW1hdGUg4oC6IEF1c3RpbiBDaXR5IiwKICAgICAgInNuaXBwZXQiOiAiQXZlcmFnZSBUZW1wZXJhdHVyZXMgZm9yIEF1c3RpbiBDaXR5IC4uLiBBdXN0aW4gQ2l0eSdzIGNvbGRlc3QgbW9udGggaXMgSmFudWFyeSB3aGVuIHRoZSBhdmVyYWdlIHRlbXBlcmF0dXJlIG92ZXJuaWdodCBpcyA0MC4wwrBGLiBJbiBBdWd1c3QsIHRoZSB3YXJtZXN0IG1vbnRoLCAuLi4iLAogICAgICAic25pcHBldF9oaWdobGlnaHRlZF93b3JkcyI6IFsKICAgICAgICAiYXZlcmFnZSB0ZW1wZXJhdHVyZSBvdmVybmlnaHQgaXMgNDAuMMKwRiIKICAgICAgXSwKICAgICAgImFib3V0X3RoaXNfcmVzdWx0IjogewogICAgICAgICJzb3VyY2UiOiB7CiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAicnNzd2VhdGhlci5jb20gd2FzIGZpcnN0IGluZGV4ZWQgYnkgR29vZ2xlIG1vcmUgdGhhbiAxMCB5ZWFycyBhZ28iLAogICAgICAgICAgInNvdXJjZV9pbmZvX2xpbmsiOiAiaHR0cHM6Ly93d3cucnNzd2VhdGhlci5jb20vY2xpbWF0ZS9UZXhhcy9BdXN0aW4lMjBDaXR5LyIsCiAgICAgICAgICAic2VjdXJpdHkiOiAic2VjdXJlIiwKICAgICAgICAgICJpY29uIjogImh0dHBzOi8vc2VycGFwaS5jb20vc2VhcmNoZXMvNjQxOGRhNTBlZjdkZGFkNTc0YWZiOGJiL2ltYWdlcy80MTljZGIwOTQ2ODI1ZTJhMDBlODExYjJjYmJjMTM4NjFjN2ZmYjRlMDA4N2FkYjU1MDhlYmZhNTU5MzFhNDhjNTBlZTlhMzUzN2NkMjRhYWE5NjA3ODU2ZmRhMTBmNzUucG5nIgogICAgICAgIH0KICAgICAgfSwKICAgICAgImFib3V0X3BhZ2VfbGluayI6ICJodHRwczovL3d3dy5nb29nbGUuY29tL3NlYXJjaD9xPUFib3V0K2h0dHBzOi8vd3d3LnJzc3dlYXRoZXIuY29tL2NsaW1hdGUvVGV4YXMvQXVzdGluJTI1MjBDaXR5LyZ0Ym09aWxwJmlscHM9QUJfTGgzcldQbVhPV1NvcllLTktaeWQ0SEpkd2FxMVltZyIsCiAgICAgICJhYm91dF9wYWdlX3NlcnBhcGlfbGluayI6ICJodHRwczovL3NlcnBhcGkuY29tL3NlYXJjaC5qc29uP2VuZ2luZT1nb29nbGVfYWJvdXRfdGhpc19yZXN1bHQmZ29vZ2xlX2RvbWFpbj1nb29nbGUuY29tJmlscHM9QUJfTGgzcldQbVhPV1NvcllLTktaeWQ0SEpkd2FxMVltZyZxPUFib3V0K2h0dHBzJTNBJTJGJTJGd3d3LnJzc3dlYXRoZXIuY29tJTJGY2xpbWF0ZSUyRlRleGFzJTJGQXVzdGluJTI1MjBDaXR5JTJGIiwKICAgICAgImNhY2hlZF9wYWdlX2xpbmsiOiAiaHR0cHM6Ly93ZWJjYWNoZS5nb29nbGV1c2VyY29udGVudC5jb20vc2VhcmNoP3E9Y2FjaGU6MFRhM2tDc2lIQnNKOmh0dHBzOi8vd3d3LnJzc3dlYXRoZXIuY29tL2NsaW1hdGUvVGV4YXMvQXVzdGluJTI1MjBDaXR5LyZjZD0xOCZobD1lbiZjdD1jbG5rJmdsPXVzIgogICAgfSwKICAgIHsKICAgICAgInBvc2l0aW9uIjogOCwKICAgICAgInRpdGxlIjogIkF1c3RpbiByZWNvcmRzIDNyZCB3YXJtZXN0IHN0YXJ0IHRvIEphbnVhcnkgb24gcmVjb3JkIC0gS1hBTiIsCiAgICAgICJsaW5rIjogImh0dHBzOi8vd3d3Lmt4YW4uY29tL3dlYXRoZXIvd2VhdGhlci1ibG9nL2F1c3Rpbi1yZWNvcmRzLTNyZC13YXJtZXN0LXN0YXJ0LXRvLWphbnVhcnktb24tcmVjb3JkLyIsCiAgICAgICJkaXNwbGF5ZWRfbGluayI6ICJodHRwczovL3d3dy5reGFuLmNvbSDigLogd2VhdGhlciDigLogd2VhdGhlci1ibG9nIOKAuiBhdXMuLi4iLAogICAgICAiZGF0ZSI6ICJKYW4gOCwgMjAyMyIsCiAgICAgICJzbmlwcGV0IjogIkphbnVhcnkgaXMsIG9uIGF2ZXJhZ2UsIG91ciBjb2xkZXN0IG1vbnRoIG9mIHRoZSB5ZWFyIHdpdGggYW4gYXZlcmFnZSB0ZW1wZXJhdHVyZSBvZiA1Mi4ywrogaW4gQXVzdGluIGF0IENhbXAgTWFicnkuIiwKICAgICAgInNuaXBwZXRfaGlnaGxpZ2h0ZWRfd29yZHMiOiBbCiAgICAgICAgIjUyLjLCuiIKICAgICAgXSwKICAgICAgImFib3V0X3RoaXNfcmVzdWx0IjogewogICAgICAgICJzb3VyY2UiOiB7CiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiS1hBTi1UViBpcyBhIHRlbGV2aXNpb24gc3RhdGlvbiBpbiBBdXN0aW4sIFRleGFzLCBVbml0ZWQgU3RhdGVzLCBhZmZpbGlhdGVkIHdpdGggTkJDLiBJdCBpcyBvd25lZCBieSBOZXhzdGFyIE1lZGlhIEdyb3VwIGFsb25nc2lkZSBMbGFuby1saWNlbnNlZCBNeU5ldHdvcmtUViBhZmZpbGlhdGUgS0JWTzsgTmV4c3RhciBhbHNvIHByb3ZpZGVzIGNlcnRhaW4gLi4uIiwKICAgICAgICAgICJzb3VyY2VfaW5mb19saW5rIjogImh0dHBzOi8vd3d3Lmt4YW4uY29tL3dlYXRoZXIvd2VhdGhlci1ibG9nL2F1c3Rpbi1yZWNvcmRzLTNyZC13YXJtZXN0LXN0YXJ0LXRvLWphbnVhcnktb24tcmVjb3JkLyIsCiAgICAgICAgICAic2VjdXJpdHkiOiAic2VjdXJlIiwKICAgICAgICAgICJpY29uIjogImh0dHBzOi8vc2VycGFwaS5jb20vc2VhcmNoZXMvNjQxOGRhNTBlZjdkZGFkNTc0YWZiOGJiL2ltYWdlcy80MTljZGIwOTQ2ODI1ZTJhMDBlODExYjJjYmJjMTM4NjBlNDZmMWU5ZDdkNmZlM2ZjZGIyOTJhZTBhYmE2ZDdlNGM1OGM4YWU0YTQ2NTkwYzMwZDlkNzE5MTdmOWY1MzkucG5nIgogICAgICAgIH0KICAgICAgfSwKICAgICAgImFib3V0X3BhZ2VfbGluayI6ICJodHRwczovL3d3dy5nb29nbGUuY29tL3NlYXJjaD9xPUFib3V0K2h0dHBzOi8vd3d3Lmt4YW4uY29tL3dlYXRoZXIvd2VhdGhlci1ibG9nL2F1c3Rpbi1yZWNvcmRzLTNyZC13YXJtZXN0LXN0YXJ0LXRvLWphbnVhcnktb24tcmVjb3JkLyZ0Ym09aWxwJmlscHM9QUJfTGgzcE0tcTdCbDRVVnowR1pZU0x1b3RWaVF3T2hBZyIsCiAgICAgICJhYm91dF9wYWdlX3NlcnBhcGlfbGluayI6ICJodHRwczovL3NlcnBhcGkuY29tL3NlYXJjaC5qc29uP2VuZ2luZT1nb29nbGVfYWJvdXRfdGhpc19yZXN1bHQmZ29vZ2xlX2RvbWFpbj1nb29nbGUuY29tJmlscHM9QUJfTGgzcE0tcTdCbDRVVnowR1pZU0x1b3RWaVF3T2hBZyZxPUFib3V0K2h0dHBzJTNBJTJGJTJGd3d3Lmt4YW4uY29tJTJGd2VhdGhlciUyRndlYXRoZXItYmxvZyUyRmF1c3Rpbi1yZWNvcmRzLTNyZC13YXJtZXN0LXN0YXJ0LXRvLWphbnVhcnktb24tcmVjb3JkJTJGIiwKICAgICAgImNhY2hlZF9wYWdlX2xpbmsiOiAiaHR0cHM6Ly93ZWJjYWNoZS5nb29nbGV1c2VyY29udGVudC5jb20vc2VhcmNoP3E9Y2FjaGU6STBhQ0NFOTNjeHdKOmh0dHBzOi8vd3d3Lmt4YW4uY29tL3dlYXRoZXIvd2VhdGhlci1ibG9nL2F1c3Rpbi1yZWNvcmRzLTNyZC13YXJtZXN0LXN0YXJ0LXRvLWphbnVhcnktb24tcmVjb3JkLyZjZD0xOSZobD1lbiZjdD1jbG5rJmdsPXVzIgogICAgfSwKICAgIHsKICAgICAgInBvc2l0aW9uIjogOSwKICAgICAgInRpdGxlIjogIlRleGFzIGFuZCBXZWF0aGVyIGF2ZXJhZ2VzIEF1c3RpbiAtIFUuUy4gQ2xpbWF0ZSBEYXRhIiwKICAgICAgImxpbmsiOiAiaHR0cHM6Ly93d3cudXNjbGltYXRlZGF0YS5jb20vY2xpbWF0ZS9hdXN0aW4vdGV4YXMvdW5pdGVkLXN0YXRlcy91c3R4Mjc0MiIsCiAgICAgICJkaXNwbGF5ZWRfbGluayI6ICJodHRwczovL3d3dy51c2NsaW1hdGVkYXRhLmNvbSDigLogdGV4YXMg4oC6IHVzdHgyNzQyIiwKICAgICAgInNuaXBwZXQiOiAiQ2xpbWF0ZSBBdXN0aW4gLSBUZXhhcyA7IDYyLCA2NSwgNzIsIDgwIDsgNDIsIDQ1LCA1MSwgNTkgLi4uIiwKICAgICAgInNuaXBwZXRfaGlnaGxpZ2h0ZWRfd29yZHMiOiBbCiAgICAgICAgIjYyLCA2NSwgNzIsIDgwIgogICAgICBdLAogICAgICAiYWJvdXRfdGhpc19yZXN1bHQiOiB7CiAgICAgICAgInNvdXJjZSI6IHsKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJ1c2NsaW1hdGVkYXRhLmNvbSB3YXMgZmlyc3QgaW5kZXhlZCBieSBHb29nbGUgbW9yZSB0aGFuIDEwIHllYXJzIGFnbyIsCiAgICAgICAgICAic291cmNlX2luZm9fbGluayI6ICJodHRwczovL3d3dy51c2NsaW1hdGVkYXRhLmNvbS9jbGltYXRlL2F1c3Rpbi90ZXhhcy91bml0ZWQtc3RhdGVzL3VzdHgyNzQyIiwKICAgICAgICAgICJzZWN1cml0eSI6ICJzZWN1cmUiLAogICAgICAgICAgImljb24iOiAiaHR0cHM6Ly9zZXJwYXBpLmNvbS9zZWFyY2hlcy82NDE4ZGE1MGVmN2RkYWQ1NzRhZmI4YmIvaW1hZ2VzLzQxOWNkYjA5NDY4MjVlMmEwMGU4MTFiMmNiYmMxMzg2ZjQ1ZmMwMjRkNzg3NjRlYjNmZTlkMjI1YTk4OWRjMzcwMGJhMjFmZmMxZmQ2NWU3OTk2MmJhNGNhMjY2ZGIwYy5wbmciCiAgICAgICAgfQogICAgICB9LAogICAgICAiYWJvdXRfcGFnZV9saW5rIjogImh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vc2VhcmNoP3E9QWJvdXQraHR0cHM6Ly93d3cudXNjbGltYXRlZGF0YS5jb20vY2xpbWF0ZS9hdXN0aW4vdGV4YXMvdW5pdGVkLXN0YXRlcy91c3R4Mjc0MiZ0Ym09aWxwJmlscHM9QUJfTGgzb25hZzRSbV83cER1YUNBRmN1aDVvNTZPaHZFdyIsCiAgICAgICJhYm91dF9wYWdlX3NlcnBhcGlfbGluayI6ICJodHRwczovL3NlcnBhcGkuY29tL3NlYXJjaC5qc29uP2VuZ2luZT1nb29nbGVfYWJvdXRfdGhpc19yZXN1bHQmZ29vZ2xlX2RvbWFpbj1nb29nbGUuY29tJmlscHM9QUJfTGgzb25hZzRSbV83cER1YUNBRmN1aDVvNTZPaHZFdyZxPUFib3V0K2h0dHBzJTNBJTJGJTJGd3d3LnVzY2xpbWF0ZWRhdGEuY29tJTJGY2xpbWF0ZSUyRmF1c3RpbiUyRnRleGFzJTJGdW5pdGVkLXN0YXRlcyUyRnVzdHgyNzQyIiwKICAgICAgImNhY2hlZF9wYWdlX2xpbmsiOiAiaHR0cHM6Ly93ZWJjYWNoZS5nb29nbGV1c2VyY29udGVudC5jb20vc2VhcmNoP3E9Y2FjaGU6SXdhWUFkdmxoZlVKOmh0dHBzOi8vd3d3LnVzY2xpbWF0ZWRhdGEuY29tL2NsaW1hdGUvYXVzdGluL3RleGFzL3VuaXRlZC1zdGF0ZXMvdXN0eDI3NDImY2Q9MjAmaGw9ZW4mY3Q9Y2xuayZnbD11cyIKICAgIH0KICBdLAogICJyZWxhdGVkX3NlYXJjaGVzIjogWwogICAgewogICAgICAicXVlcnkiOiAid2VhdGhlciBhdXN0aW4sIHR4IiwKICAgICAgImxpbmsiOiAiaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9zZWFyY2g/cT1XZWF0aGVyK0F1c3RpbiwrVFgmc2E9WCZ2ZWQ9MmFoVUtFd2pzd09IS3ctdjlBaFdrUnpBQkhYVElEandRMVFKNkJBaEVFQUUiCiAgICB9LAogICAgewogICAgICAicXVlcnkiOiAidGV4YXMgd2VhdGhlciBqYW51YXJ5IGNlbHNpdXMiLAogICAgICAibGluayI6ICJodHRwczovL3d3dy5nb29nbGUuY29tL3NlYXJjaD9xPVRleGFzK3dlYXRoZXIrSmFudWFyeStjZWxzaXVzJnNhPVgmdmVkPTJhaFVLRXdqc3dPSEt3LXY5QWhXa1J6QUJIWFRJRGp3UTFRSjZCQWhERUFFIgogICAgfSwKICAgIHsKICAgICAgInF1ZXJ5IjogIndlYXRoZXIgYXVzdGluIGphbnVhcnkgMjAyMyIsCiAgICAgICJsaW5rIjogImh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vc2VhcmNoP3E9V2VhdGhlcitBdXN0aW4rSmFudWFyeSsyMDIzJnNhPVgmdmVkPTJhaFVLRXdqc3dPSEt3LXY5QWhXa1J6QUJIWFRJRGp3UTFRSjZCQWhNRUFFIgogICAgfSwKICAgIHsKICAgICAgInF1ZXJ5IjogInNhbiBhbnRvbmlvLCB0ZXhhcyB3ZWF0aGVyIGphbnVhcnkiLAogICAgICAibGluayI6ICJodHRwczovL3d3dy5nb29nbGUuY29tL3NlYXJjaD9xPVNhbitBbnRvbmlvLCtUZXhhcyt3ZWF0aGVyK0phbnVhcnkmc2E9WCZ2ZWQ9MmFoVUtFd2pzd09IS3ctdjlBaFdrUnpBQkhYVElEandRMVFKNkJBZzFFQUUiCiAgICB9LAogICAgewogICAgICAicXVlcnkiOiAiamFudWFyeSB3ZWF0aGVyIHRleGFzIDIwMjMiLAogICAgICAibGluayI6ICJodHRwczovL3d3dy5nb29nbGUuY29tL3NlYXJjaD9xPUphbnVhcnkrd2VhdGhlcitUZXhhcysyMDIzJnNhPVgmdmVkPTJhaFVLRXdqc3dPSEt3LXY5QWhXa1J6QUJIWFRJRGp3UTFRSjZCQWcyRUFFIgogICAgfSwKICAgIHsKICAgICAgInF1ZXJ5IjogImF1c3RpbiwgdGV4YXMgd2VhdGhlciB5ZWFyIHJvdW5kIGh1bWlkaXR5IiwKICAgICAgImxpbmsiOiAiaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9zZWFyY2g/cT1BdXN0aW4rVGV4YXMrd2VhdGhlcit5ZWFyK3JvdW5kK2h1bWlkaXR5JnNhPVgmdmVkPTJhaFVLRXdqc3dPSEt3LXY5QWhXa1J6QUJIWFRJRGp3UTFRSjZCQWdfRUFFIgogICAgfSwKICAgIHsKICAgICAgInF1ZXJ5IjogIndoYXQgdG8gZG8gaW4gYXVzdGluIGluIGphbnVhcnkiLAogICAgICAibGluayI6ICJodHRwczovL3d3dy5nb29nbGUuY29tL3NlYXJjaD9xPVdoYXQrdG8rZG8raW4rQXVzdGluK2luK0phbnVhcnkmc2E9WCZ2ZWQ9MmFoVUtFd2pzd09IS3ctdjlBaFdrUnpBQkhYVElEandRMVFKNkJBaExFQUUiCiAgICB9LAogICAgewogICAgICAicXVlcnkiOiAiYXVzdGluIGF2ZXJhZ2UgdGVtcGVyYXR1cmUgYnkgeWVhciIsCiAgICAgICJsaW5rIjogImh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vc2VhcmNoP3E9QXVzdGluK2F2ZXJhZ2UrdGVtcGVyYXR1cmUrYnkreWVhciZzYT1YJnZlZD0yYWhVS0V3anN3T0hLdy12OUFoV2tSekFCSFhUSURqd1ExUUo2QkFoQUVBRSIKICAgIH0KICBdLAogICJwYWdpbmF0aW9uIjogewogICAgImN1cnJlbnQiOiAxLAogICAgIm5leHQiOiAiaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9zZWFyY2g/cT1BdmVyYWdlK3RlbXBlcmF0dXJlK2luK0F1c3RpbitUWCtpbitKYW51YXJ5Jm9xPUF2ZXJhZ2UrdGVtcGVyYXR1cmUraW4rQXVzdGluK1RYK2luK0phbnVhcnkmc3RhcnQ9MTAmc291cmNlaWQ9Y2hyb21lJmllPVVURi04IiwKICAgICJvdGhlcl9wYWdlcyI6IHsKICAgICAgIjIiOiAiaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9zZWFyY2g/cT1BdmVyYWdlK3RlbXBlcmF0dXJlK2luK0F1c3RpbitUWCtpbitKYW51YXJ5Jm9xPUF2ZXJhZ2UrdGVtcGVyYXR1cmUraW4rQXVzdGluK1RYK2luK0phbnVhcnkmc3RhcnQ9MTAmc291cmNlaWQ9Y2hyb21lJmllPVVURi04IiwKICAgICAgIjMiOiAiaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9zZWFyY2g/cT1BdmVyYWdlK3RlbXBlcmF0dXJlK2luK0F1c3RpbitUWCtpbitKYW51YXJ5Jm9xPUF2ZXJhZ2UrdGVtcGVyYXR1cmUraW4rQXVzdGluK1RYK2luK0phbnVhcnkmc3RhcnQ9MjAmc291cmNlaWQ9Y2hyb21lJmllPVVURi04IiwKICAgICAgIjQiOiAiaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9zZWFyY2g/cT1BdmVyYWdlK3RlbXBlcmF0dXJlK2luK0F1c3RpbitUWCtpbitKYW51YXJ5Jm9xPUF2ZXJhZ2UrdGVtcGVyYXR1cmUraW4rQXVzdGluK1RYK2luK0phbnVhcnkmc3RhcnQ9MzAmc291cmNlaWQ9Y2hyb21lJmllPVVURi04IiwKICAgICAgIjUiOiAiaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9zZWFyY2g/cT1BdmVyYWdlK3RlbXBlcmF0dXJlK2luK0F1c3RpbitUWCtpbitKYW51YXJ5Jm9xPUF2ZXJhZ2UrdGVtcGVyYXR1cmUraW4rQXVzdGluK1RYK2luK0phbnVhcnkmc3RhcnQ9NDAmc291cmNlaWQ9Y2hyb21lJmllPVVURi04IgogICAgfQogIH0sCiAgInNlcnBhcGlfcGFnaW5hdGlvbiI6IHsKICAgICJjdXJyZW50IjogMSwKICAgICJuZXh0X2xpbmsiOiAiaHR0cHM6Ly9zZXJwYXBpLmNvbS9zZWFyY2guanNvbj9kZXZpY2U9ZGVza3RvcCZlbmdpbmU9Z29vZ2xlJmdvb2dsZV9kb21haW49Z29vZ2xlLmNvbSZxPUF2ZXJhZ2UrdGVtcGVyYXR1cmUraW4rQXVzdGluK1RYK2luK0phbnVhcnkmc3RhcnQ9MTAiLAogICAgIm5leHQiOiAiaHR0cHM6Ly9zZXJwYXBpLmNvbS9zZWFyY2guanNvbj9kZXZpY2U9ZGVza3RvcCZlbmdpbmU9Z29vZ2xlJmdvb2dsZV9kb21haW49Z29vZ2xlLmNvbSZxPUF2ZXJhZ2UrdGVtcGVyYXR1cmUraW4rQXVzdGluK1RYK2luK0phbnVhcnkmc3RhcnQ9MTAiLAogICAgIm90aGVyX3BhZ2VzIjogewogICAgICAiMiI6ICJodHRwczovL3NlcnBhcGkuY29tL3NlYXJjaC5qc29uP2RldmljZT1kZXNrdG9wJmVuZ2luZT1nb29nbGUmZ29vZ2xlX2RvbWFpbj1nb29nbGUuY29tJnE9QXZlcmFnZSt0ZW1wZXJhdHVyZStpbitBdXN0aW4rVFgraW4rSmFudWFyeSZzdGFydD0xMCIsCiAgICAgICIzIjogImh0dHBzOi8vc2VycGFwaS5jb20vc2VhcmNoLmpzb24/ZGV2aWNlPWRlc2t0b3AmZW5naW5lPWdvb2dsZSZnb29nbGVfZG9tYWluPWdvb2dsZS5jb20mcT1BdmVyYWdlK3RlbXBlcmF0dXJlK2luK0F1c3RpbitUWCtpbitKYW51YXJ5JnN0YXJ0PTIwIiwKICAgICAgIjQiOiAiaHR0cHM6Ly9zZXJwYXBpLmNvbS9zZWFyY2guanNvbj9kZXZpY2U9ZGVza3RvcCZlbmdpbmU9Z29vZ2xlJmdvb2dsZV9kb21haW49Z29vZ2xlLmNvbSZxPUF2ZXJhZ2UrdGVtcGVyYXR1cmUraW4rQXVzdGluK1RYK2luK0phbnVhcnkmc3RhcnQ9MzAiLAogICAgICAiNSI6ICJodHRwczovL3NlcnBhcGkuY29tL3NlYXJjaC5qc29uP2RldmljZT1kZXNrdG9wJmVuZ2luZT1nb29nbGUmZ29vZ2xlX2RvbWFpbj1nb29nbGUuY29tJnE9QXZlcmFnZSt0ZW1wZXJhdHVyZStpbitBdXN0aW4rVFgraW4rSmFudWFyeSZzdGFydD00MCIKICAgIH0KICB9Cn0=
  recorded_at: Mon, 20 Mar 2023 22:12:40 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"messages":[{"role":"system","content":"Answer the following questions
        as best you can. You have access to the following actions:\nSearch: useful
        for when you need to answer questions about current events.You should ask
        targeted questions\nCalculator: useful for when you need to answer questions
        about math\nUse the following format:\nQuestion: the input question you must
        answer\nThought: you should always think about what to do\nAction: the action
        to take, should be one from this list: [Search, Calculator]\nAction Input:
        the input to the action\nObservation: the result of the action\n... (this
        Thought/Action/Action Input/Observation sequence can repeat N times)\nThought:
        I know the final answer\nFinal Answer: the final answer to the original input
        question\nNext Actions: Up to 3 logical suggested next questions for the user
        to ask after getting this answer.\nRemember to start a line with \"Final Answer:\"
        to give me the final answer.\nBegin!"},{"role":"user","content":"Question:
        What is pi times the square root of the average Fahrenheit temperature in
        Austin TX in January?"},{"role":"assistant","content":"Thought:  We need to
        find the average temperature in Austin, TX in January and then multiply it
        by the square root of pi. We can use a search engine to find the average temperature
        and a calculator to perform the multiplication. \n\nAction: Search\nAction
        Input: \"Average temperature in Austin TX in January\"\nObservation: Daily
        high temperatures increase by 2°F, from 62°F to 64°F\nThought: We need the
        average temperature, not just the daily high temperature. Let''s try another
        search.\n\nAction: Search\nAction Input: \"Average temperature in Austin TX
        in January\"\nObservation: Daily high temperatures increase by 2°F, from 62°F
        to 64°F\nThought:"}],"model":"gpt-3.5-turbo","temperature":0.2,"max_tokens":512,"stop":["\nObservation:
        "]}'
    headers:
      Content-Type:
      - application/json
      Authorization:
      - Bearer <openai_access_token>
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 20 Mar 2023 22:12:44 GMT
      Content-Type:
      - application/json
      Content-Length:
      - '433'
      Connection:
      - keep-alive
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - no-cache, must-revalidate
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - user-ri9zw9ahumb1bo9vs73mudbi
      Openai-Processing-Ms:
      - '3865'
      Openai-Version:
      - '2020-10-01'
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Request-Id:
      - 90b14d3fd2a49f5fb8efaaaad80bbb0f
    body:
      encoding: UTF-8
      string: '{"id":"chatcmpl-6wI24OQY39XEtEG6Gp1GLgXlGGV1U","object":"chat.completion","created":1679350360,"model":"gpt-3.5-turbo-0301","usage":{"prompt_tokens":370,"completion_tokens":30,"total_tokens":400},"choices":[{"message":{"role":"assistant","content":"This
        search result is not helpful. Let''s try a different search query.\n\nAction:
        Search\nAction Input: \"Average temperature Austin TX January\""},"finish_reason":"stop","index":0}]}

        '
  recorded_at: Mon, 20 Mar 2023 22:12:44 GMT
- request:
    method: get
    uri: https://serpapi.com/search?api_key=<SERPAPI_API_KEY>&engine=google&output=json&q=Average%20temperature%20Austin%20TX%20January&source=ruby
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 20 Mar 2023 22:12:47 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Cf-Ray:
      - 7ab14c62fe29a02c-SLC
      Cache-Control:
      - max-age=3600, public
      Etag:
      - W/"3105776285413236916ea6e092d1313d"
      Vary:
      - Accept-Encoding
      Cf-Cache-Status:
      - MISS
      Referrer-Policy:
      - strict-origin-when-cross-origin
      Serpapi-Search-Id:
      - 6418da5ccca014a74819361e
      X-Content-Type-Options:
      - nosniff
      X-Download-Options:
      - noopen
      X-Frame-Options:
      - SAMEORIGIN
      X-Permitted-Cross-Domain-Policies:
      - none
      X-Request-Id:
      - 1d601ba9-a8eb-447b-9c33-23c8285093e9
      X-Robots-Tag:
      - noindex, nofollow
      X-Runtime:
      - '2.393550'
      X-Xss-Protection:
      - 1; mode=block
      Server:
      - cloudflare
      Alt-Svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 20 Mar 2023 22:12:47 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"messages":[{"role":"system","content":"Answer the following questions
        as best you can. You have access to the following actions:\nSearch: useful
        for when you need to answer questions about current events.You should ask
        targeted questions\nCalculator: useful for when you need to answer questions
        about math\nUse the following format:\nQuestion: the input question you must
        answer\nThought: you should always think about what to do\nAction: the action
        to take, should be one from this list: [Search, Calculator]\nAction Input:
        the input to the action\nObservation: the result of the action\n... (this
        Thought/Action/Action Input/Observation sequence can repeat N times)\nThought:
        I know the final answer\nFinal Answer: the final answer to the original input
        question\nNext Actions: Up to 3 logical suggested next questions for the user
        to ask after getting this answer.\nRemember to start a line with \"Final Answer:\"
        to give me the final answer.\nBegin!"},{"role":"user","content":"Question:
        What is pi times the square root of the average Fahrenheit temperature in
        Austin TX in January?"},{"role":"assistant","content":"Thought:  We need to
        find the average temperature in Austin, TX in January and then multiply it
        by the square root of pi. We can use a search engine to find the average temperature
        and a calculator to perform the multiplication. \n\nAction: Search\nAction
        Input: \"Average temperature in Austin TX in January\"\nObservation: Daily
        high temperatures increase by 2°F, from 62°F to 64°F\nThought: We need the
        average temperature, not just the daily high temperature. Let''s try another
        search.\n\nAction: Search\nAction Input: \"Average temperature in Austin TX
        in January\"\nObservation: Daily high temperatures increase by 2°F, from 62°F
        to 64°F\nThought: This search result is not helpful. Let''s try a different
        search query.\n\nAction: Search\nAction Input: \"Average temperature Austin
        TX January\"\nObservation: Daily high temperatures increase by 2°F, from 62°F
        to 64°F\nThought:"}],"model":"gpt-3.5-turbo","temperature":0.2,"max_tokens":512,"stop":["\nObservation:
        "]}'
    headers:
      Content-Type:
      - application/json
      Authorization:
      - Bearer <openai_access_token>
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 20 Mar 2023 22:12:50 GMT
      Content-Type:
      - application/json
      Content-Length:
      - '438'
      Connection:
      - keep-alive
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - no-cache, must-revalidate
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - user-ri9zw9ahumb1bo9vs73mudbi
      Openai-Processing-Ms:
      - '3473'
      Openai-Version:
      - '2020-10-01'
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Request-Id:
      - 3ca9c09c84d7618c3e2994e0a38b82a9
    body:
      encoding: UTF-8
      string: '{"id":"chatcmpl-6wI2BwsKBWd6nQeSh50ftQbfmVRWy","object":"chat.completion","created":1679350367,"model":"gpt-3.5-turbo-0301","usage":{"prompt_tokens":422,"completion_tokens":31,"total_tokens":453},"choices":[{"message":{"role":"assistant","content":"This
        search result is still not helpful. Let''s try a different search query.\n\nAction:
        Search\nAction Input: \"Average temperature Austin TX winter\""},"finish_reason":"stop","index":0}]}

        '
  recorded_at: Mon, 20 Mar 2023 22:12:50 GMT
- request:
    method: get
    uri: https://serpapi.com/search?api_key=<SERPAPI_API_KEY>&engine=google&output=json&q=Average%20temperature%20Austin%20TX%20winter&source=ruby
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 20 Mar 2023 22:12:52 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Cf-Ray:
      - 7ab14c8b6b01a074-SLC
      Cache-Control:
      - max-age=3600, public
      Etag:
      - W/"f1c72604574915d42cdd7c6c17edca5f"
      Vary:
      - Accept-Encoding
      Cf-Cache-Status:
      - MISS
      Referrer-Policy:
      - strict-origin-when-cross-origin
      Serpapi-Search-Id:
      - 6418da6329d1773aac3479af
      X-Content-Type-Options:
      - nosniff
      X-Download-Options:
      - noopen
      X-Frame-Options:
      - SAMEORIGIN
      X-Permitted-Cross-Domain-Policies:
      - none
      X-Request-Id:
      - 2c67ff57-98ae-4b00-a507-75dd2f8049a6
      X-Robots-Tag:
      - noindex, nofollow
      X-Runtime:
      - '1.297722'
      X-Xss-Protection:
      - 1; mode=block
      Server:
      - cloudflare
      Alt-Svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 20 Mar 2023 22:12:52 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"messages":[{"role":"system","content":"Answer the following questions
        as best you can. You have access to the following actions:\nSearch: useful
        for when you need to answer questions about current events.You should ask
        targeted questions\nCalculator: useful for when you need to answer questions
        about math\nUse the following format:\nQuestion: the input question you must
        answer\nThought: you should always think about what to do\nAction: the action
        to take, should be one from this list: [Search, Calculator]\nAction Input:
        the input to the action\nObservation: the result of the action\n... (this
        Thought/Action/Action Input/Observation sequence can repeat N times)\nThought:
        I know the final answer\nFinal Answer: the final answer to the original input
        question\nNext Actions: Up to 3 logical suggested next questions for the user
        to ask after getting this answer.\nRemember to start a line with \"Final Answer:\"
        to give me the final answer.\nBegin!"},{"role":"user","content":"Question:
        What is pi times the square root of the average Fahrenheit temperature in
        Austin TX in January?"},{"role":"assistant","content":"Thought:  We need to
        find the average temperature in Austin, TX in January and then multiply it
        by the square root of pi. We can use a search engine to find the average temperature
        and a calculator to perform the multiplication. \n\nAction: Search\nAction
        Input: \"Average temperature in Austin TX in January\"\nObservation: Daily
        high temperatures increase by 2°F, from 62°F to 64°F\nThought: We need the
        average temperature, not just the daily high temperature. Let''s try another
        search.\n\nAction: Search\nAction Input: \"Average temperature in Austin TX
        in January\"\nObservation: Daily high temperatures increase by 2°F, from 62°F
        to 64°F\nThought: This search result is not helpful. Let''s try a different
        search query.\n\nAction: Search\nAction Input: \"Average temperature Austin
        TX January\"\nObservation: Daily high temperatures increase by 2°F, from 62°F
        to 64°F\nThought: This search result is still not helpful. Let''s try a different
        search query.\n\nAction: Search\nAction Input: \"Average temperature Austin
        TX winter\"\nObservation: around 66°F\nThought:"}],"model":"gpt-3.5-turbo","temperature":0.2,"max_tokens":512,"stop":["\nObservation:
        "]}'
    headers:
      Content-Type:
      - application/json
      Authorization:
      - Bearer <openai_access_token>
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 20 Mar 2023 22:12:55 GMT
      Content-Type:
      - application/json
      Content-Length:
      - '435'
      Connection:
      - keep-alive
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - no-cache, must-revalidate
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - user-ri9zw9ahumb1bo9vs73mudbi
      Openai-Processing-Ms:
      - '3038'
      Openai-Version:
      - '2020-10-01'
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Request-Id:
      - 9f749dd9f11c5f01747b6848fad8f39d
    body:
      encoding: UTF-8
      string: '{"id":"chatcmpl-6wI2GRtJLyrKbMLXOBzxm4a9wRCjJ","object":"chat.completion","created":1679350372,"model":"gpt-3.5-turbo-0301","usage":{"prompt_tokens":462,"completion_tokens":32,"total_tokens":494},"choices":[{"message":{"role":"assistant","content":"Now
        that we have the average temperature, we can use a calculator to perform the
        multiplication.\n\nAction: Calculator\nAction Input: pi * sqrt(66)"},"finish_reason":"stop","index":0}]}

        '
  recorded_at: Mon, 20 Mar 2023 22:12:55 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"messages":[{"role":"system","content":"You can do basic math, but
        for any hard calculations that a human could not do in their head, use the
        following approach instead. Return code written in the Ruby programming language
        that prints the results. If anyone gives you a hard math problem, just use
        the following format and we’ll take care of the rest:\n${{Question with hard
        calculation.}}\nreply only with the following format:\n```ruby\n${{only Ruby
        code that prints the answer}}\n```\n```output\n${{Output of your code}}\n```\n\nOtherwise,
        you should use this simpler format:\n${{Question without hard calculation}}\nAnswer:
        ${{Answer}}\n\nDo not give an explanation of the answer and make sure your
        answer starts with either ''Answer:'' or ''```ruby''."},{"role":"system","content":"here
        is a hard example:\nthe user asks: What is 37593 * 67?\nyour answer: ```ruby\nputs(37593
        * 67)\n```\n```output\n2518731\n```\nAnswer: 2518731"},{"role":"system","content":"basic
        example:\nuser asks: What is 2518731 + 0?\nyou answer: Answer: 2518731"},{"role":"system","content":"Begin."},{"role":"user","content":"pi
        * sqrt(66)"}],"model":"gpt-3.5-turbo","temperature":0.2,"max_tokens":512,"stop":["```output"]}'
    headers:
      Content-Type:
      - application/json
      Authorization:
      - Bearer <openai_access_token>
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 20 Mar 2023 22:12:57 GMT
      Content-Type:
      - application/json
      Content-Length:
      - '334'
      Connection:
      - keep-alive
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - no-cache, must-revalidate
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - user-ri9zw9ahumb1bo9vs73mudbi
      Openai-Processing-Ms:
      - '1897'
      Openai-Version:
      - '2020-10-01'
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Request-Id:
      - f757dd185bbe26a485b2e616972d65f6
    body:
      encoding: UTF-8
      string: '{"id":"chatcmpl-6wI2Kib9sMkHfgkqnN9kJXZhJJQy2","object":"chat.completion","created":1679350376,"model":"gpt-3.5-turbo-0301","usage":{"prompt_tokens":261,"completion_tokens":16,"total_tokens":277},"choices":[{"message":{"role":"assistant","content":"```ruby\nputs(Math::PI
        * Math.sqrt(66))\n```\n"},"finish_reason":"stop","index":0}]}

        '
  recorded_at: Mon, 20 Mar 2023 22:12:57 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"messages":[{"role":"system","content":"Answer the following questions
        as best you can. You have access to the following actions:\nSearch: useful
        for when you need to answer questions about current events.You should ask
        targeted questions\nCalculator: useful for when you need to answer questions
        about math\nUse the following format:\nQuestion: the input question you must
        answer\nThought: you should always think about what to do\nAction: the action
        to take, should be one from this list: [Search, Calculator]\nAction Input:
        the input to the action\nObservation: the result of the action\n... (this
        Thought/Action/Action Input/Observation sequence can repeat N times)\nThought:
        I know the final answer\nFinal Answer: the final answer to the original input
        question\nNext Actions: Up to 3 logical suggested next questions for the user
        to ask after getting this answer.\nRemember to start a line with \"Final Answer:\"
        to give me the final answer.\nBegin!"},{"role":"user","content":"Question:
        What is pi times the square root of the average Fahrenheit temperature in
        Austin TX in January?"},{"role":"assistant","content":"Thought:  We need to
        find the average temperature in Austin, TX in January and then multiply it
        by the square root of pi. We can use a search engine to find the average temperature
        and a calculator to perform the multiplication. \n\nAction: Search\nAction
        Input: \"Average temperature in Austin TX in January\"\nObservation: Daily
        high temperatures increase by 2°F, from 62°F to 64°F\nThought: We need the
        average temperature, not just the daily high temperature. Let''s try another
        search.\n\nAction: Search\nAction Input: \"Average temperature in Austin TX
        in January\"\nObservation: Daily high temperatures increase by 2°F, from 62°F
        to 64°F\nThought: This search result is not helpful. Let''s try a different
        search query.\n\nAction: Search\nAction Input: \"Average temperature Austin
        TX January\"\nObservation: Daily high temperatures increase by 2°F, from 62°F
        to 64°F\nThought: This search result is still not helpful. Let''s try a different
        search query.\n\nAction: Search\nAction Input: \"Average temperature Austin
        TX winter\"\nObservation: around 66°F\nThought: Now that we have the average
        temperature, we can use a calculator to perform the multiplication.\n\nAction:
        Calculator\nAction Input: pi * sqrt(66)\nObservation: 25.52241936948568\nThought:"}],"model":"gpt-3.5-turbo","temperature":0.2,"max_tokens":512,"stop":["\nObservation:
        "]}'
    headers:
      Content-Type:
      - application/json
      Authorization:
      - Bearer <openai_access_token>
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Mon, 20 Mar 2023 22:13:03 GMT
      Content-Type:
      - application/json
      Content-Length:
      - '507'
      Connection:
      - keep-alive
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - no-cache, must-revalidate
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - user-ri9zw9ahumb1bo9vs73mudbi
      Openai-Processing-Ms:
      - '4634'
      Openai-Version:
      - '2020-10-01'
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Request-Id:
      - ac72b36cf9880b87ea74e302dfb4b325
    body:
      encoding: UTF-8
      string: '{"id":"chatcmpl-6wI2MKipwwjegkxVYKq1YOH4wSiQB","object":"chat.completion","created":1679350378,"model":"gpt-3.5-turbo-0301","usage":{"prompt_tokens":507,"completion_tokens":56,"total_tokens":563},"choices":[{"message":{"role":"assistant","content":"Final
        Answer: 25.52241936948568\n\nNext Actions:\n1. What is the average temperature
        in Austin, TX in July?\n2. What is the formula for converting Celsius to Fahrenheit?\n3.
        What is the value of pi to 10 decimal places?"},"finish_reason":"stop","index":0}]}

        '
  recorded_at: Mon, 20 Mar 2023 22:13:03 GMT
recorded_with: VCR 6.1.0
