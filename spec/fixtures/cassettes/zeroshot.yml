---
http_interactions:
- request:
    method: get
    uri: https://serpapi.com/search?api_key=<SERPAPI_API_KEY>&engine=google&output=json&q=average%20high%20temperature%20Austin%20TX%20January&source=ruby
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Tue, 28 Mar 2023 20:32:49 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Cf-Ray:
      - 7af2a5041fb827f4-SLC
      Age:
      - '106'
      Cache-Control:
      - max-age=3600, public
      Etag:
      - W/"ac8f1a8609c158d5a795dd26621207a6"
      Vary:
      - Accept-Encoding
      Cf-Cache-Status:
      - HIT
      Referrer-Policy:
      - strict-origin-when-cross-origin
      Serpapi-Search-Id:
      - 64234e812236e2db2cc58f03
      X-Content-Type-Options:
      - nosniff
      X-Download-Options:
      - noopen
      X-Frame-Options:
      - SAMEORIGIN
      X-Permitted-Cross-Domain-Policies:
      - none
      X-Request-Id:
      - 4f23204d-89a7-4f6a-ac16-6b7c359c82c4
      X-Robots-Tag:
      - noindex, nofollow
      X-Runtime:
      - '6.013472'
      X-Xss-Protection:
      - 1; mode=block
      Server:
      - cloudflare
      Alt-Svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Tue, 28 Mar 2023 20:32:49 GMT
- request:
    method: get
    uri: https://serpapi.com/search?api_key=<SERPAPI_API_KEY>&engine=google&output=json&q=what%20is%20the%20average%20high%20temperature%20in%20Austin%20TX%20in%20January&source=ruby
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Tue, 28 Mar 2023 20:32:51 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Cf-Ray:
      - 7af2a512696a0855-SLC
      Age:
      - '74'
      Cache-Control:
      - max-age=3600, public
      Etag:
      - W/"020c2d3dd270358c9e621c893ea84dd0"
      Vary:
      - Accept-Encoding
      Cf-Cache-Status:
      - HIT
      Referrer-Policy:
      - strict-origin-when-cross-origin
      Serpapi-Search-Id:
      - 64234ea7f0adfbfb5327fc2a
      X-Content-Type-Options:
      - nosniff
      X-Download-Options:
      - noopen
      X-Frame-Options:
      - SAMEORIGIN
      X-Permitted-Cross-Domain-Policies:
      - none
      X-Request-Id:
      - 31fc8532-6d4d-473d-b170-91a78fac2946
      X-Robots-Tag:
      - noindex, nofollow
      X-Runtime:
      - '1.376939'
      X-Xss-Protection:
      - 1; mode=block
      Server:
      - cloudflare
      Alt-Svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Tue, 28 Mar 2023 20:32:51 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"messages":[{"role":"system","content":"Answer the following questions
        as best you can. You have access to the following actions:\nSearch: useful
        for when you need to answer questions about current events.You should ask
        targeted questions\nCalculator: useful for when you need to answer questions
        about math\nUse the following format:\nQuestion: the input question you must
        answer\nThought: you should always think about what to do\nAction: the action
        to take, should be one from this list: [Search, Calculator]\nAction Input:
        the input to the action\nObservation: the result of the action\n... (this
        Thought/Action/Action Input/Observation sequence can repeat N times)\nThought:
        I know the final answer\nFinal Answer: the final answer to the original input
        question\nNext Actions: Up to 3 logical suggested next questions for the user
        to ask after getting this answer.\nRemember to start a line with \"Final Answer:\"
        to give me the final answer.\nBegin!"},{"role":"user","content":"Question:
        What is pi times the square root of the average high temperature in Austin
        TX in January?"},{"role":"assistant","content":"Thought:  We need to find
        the average high temperature in Austin TX in January and multiply it by pi
        times the square root of that value. We can use a search engine to find the
        average high temperature and a calculator to perform the multiplication. \n\nAction:
        Search\nAction Input: \"average high temperature Austin TX January\"\nObservation:
        In Austin during January average daily high temperatures increase from 62°F
        to 64°F and it is overcast or mostly cloudy about 44% of the time.\nThought:
        We need the actual average high temperature value, so let''s try a different
        search.\n\nAction: Search\nAction Input: \"what is the average high temperature
        in Austin TX in January\"\nObservation: January Weather in Austin Texas, United
        States. Daily high temperatures increase by 2°F, from 62°F to 64°F, rarely
        falling below 45°F or exceeding 76° ...\nThought: Now that we have the average
        high temperature in Austin TX in January (64°F), we can use a calculator to
        find the final answer.\n\nAction: Calculator\nAction Input: pi * sqrt(64)\nObservation:
        25.132741228718345\nThought:"}],"model":"gpt-3.5-turbo","temperature":0.2,"max_tokens":512,"stop":["\nObservation:
        "]}'
    headers:
      Content-Type:
      - application/json
      Authorization:
      - Bearer <openai_access_token>
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Tue, 28 Mar 2023 20:32:59 GMT
      Content-Type:
      - application/json
      Content-Length:
      - '687'
      Connection:
      - keep-alive
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - no-cache, must-revalidate
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - user-ri9zw9ahumb1bo9vs73mudbi
      Openai-Processing-Ms:
      - '3450'
      Openai-Version:
      - '2020-10-01'
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Request-Id:
      - 655bba0514c8408e385fc9b9ff3eecbd
    body:
      encoding: UTF-8
      string: '{"id":"chatcmpl-6zAHvS4V11DQuZZr7YxN3FEhYfkwu","object":"chat.completion","created":1680035575,"model":"gpt-3.5-turbo-0301","usage":{"prompt_tokens":466,"completion_tokens":82,"total_tokens":548},"choices":[{"message":{"role":"assistant","content":"We
        have the final answer.\n\nFinal Answer: pi times the square root of the average
        high temperature in Austin TX in January is approximately 25.13.\n\nNext Actions:\n1.
        What is the average low temperature in Austin TX in January?\n2. What is the
        highest recorded temperature in Austin TX in January?\n3. How does the average
        high temperature in Austin TX in January compare to other cities in Texas?"},"finish_reason":"stop","index":0}]}

        '
  recorded_at: Tue, 28 Mar 2023 20:32:59 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"messages":[{"role":"system","content":"Answer the following questions
        as best you can. You have access to the following actions:\nSearch: useful
        for when you need to answer questions about current events.You should ask
        targeted questions\nCalculator: useful for when you need to answer questions
        about math\nUse the following format:\nQuestion: the input question you must
        answer\nThought: you should always think about what to do\nAction: the action
        to take, should be one from this list: [Search, Calculator]\nAction Input:
        the input to the action\nObservation: the result of the action\n... (this
        Thought/Action/Action Input/Observation sequence can repeat N times)\nThought:
        I know the final answer\nFinal Answer: the final answer to the original input
        question\nNext Actions: Up to 3 logical suggested next questions for the user
        to ask after getting this answer.\nRemember to start a line with \"Final Answer:\"
        to give me the final answer.\nBegin!"},{"role":"user","content":"Question:
        What is pi times the square root of the average high temperature in Austin
        TX in January?"},{"role":"assistant","content":"Thought: "}],"model":"gpt-3.5-turbo","temperature":0.2,"max_tokens":512,"stop":["\nObservation:
        "]}'
    headers:
      Content-Type:
      - application/json
      Authorization:
      - Bearer <openai_access_token>
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 30 Mar 2023 20:06:48 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - no-cache, must-revalidate
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - user-ri9zw9ahumb1bo9vs73mudbi
      Openai-Processing-Ms:
      - '2727'
      Openai-Version:
      - '2020-10-01'
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Request-Id:
      - 40f3bd88a00664e9566ba9883d839d13
      Cf-Cache-Status:
      - DYNAMIC
      Server:
      - cloudflare
      Cf-Ray:
      - 7b02f99a6abe2806-SLC
      Alt-Svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: '{"id":"chatcmpl-6zspiBLUeTCyMaiJxT7AHozwqqE7Z","object":"chat.completion","created":1680206806,"model":"gpt-3.5-turbo-0301","usage":{"prompt_tokens":230,"completion_tokens":80,"total_tokens":310},"choices":[{"message":{"role":"assistant","content":"We
        need to find the average high temperature in Austin TX in January and then
        multiply it by pi times the square root of that value. We can use a search
        engine to find the average high temperature in Austin TX in January. Once
        we have that value, we can use a calculator to perform the necessary calculations.
        \n\nAction: Search\nAction Input: \"average high temperature in Austin TX
        in January\""},"finish_reason":"stop","index":0}]}

        '
  recorded_at: Thu, 30 Mar 2023 20:06:48 GMT
- request:
    method: get
    uri: https://serpapi.com/search?api_key=<SERPAPI_API_KEY>&engine=google&output=json&q=average%20high%20temperature%20in%20Austin%20TX%20in%20January&source=ruby
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 30 Mar 2023 20:06:51 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Cf-Ray:
      - 7b02f9ad1e2327d8-SLC
      Cache-Control:
      - max-age=3600, public
      Etag:
      - W/"a1210697f8618d28dd41bbad7b34125b"
      Vary:
      - Accept-Encoding
      Cf-Cache-Status:
      - MISS
      Referrer-Policy:
      - strict-origin-when-cross-origin
      Serpapi-Search-Id:
      - 6425ebd958762b74330f921c
      X-Content-Type-Options:
      - nosniff
      X-Download-Options:
      - noopen
      X-Frame-Options:
      - SAMEORIGIN
      X-Permitted-Cross-Domain-Policies:
      - none
      X-Request-Id:
      - 8417b98a-a6c7-4f55-8c79-3cab2ee531d8
      X-Robots-Tag:
      - noindex, nofollow
      X-Runtime:
      - '2.085275'
      X-Xss-Protection:
      - 1; mode=block
      Server:
      - cloudflare
      Alt-Svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 30 Mar 2023 20:06:51 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"messages":[{"role":"system","content":"Answer the following questions
        as best you can. You have access to the following actions:\nSearch: useful
        for when you need to answer questions about current events.You should ask
        targeted questions\nCalculator: useful for when you need to answer questions
        about math\nUse the following format:\nQuestion: the input question you must
        answer\nThought: you should always think about what to do\nAction: the action
        to take, should be one from this list: [Search, Calculator]\nAction Input:
        the input to the action\nObservation: the result of the action\n... (this
        Thought/Action/Action Input/Observation sequence can repeat N times)\nThought:
        I know the final answer\nFinal Answer: the final answer to the original input
        question\nNext Actions: Up to 3 logical suggested next questions for the user
        to ask after getting this answer.\nRemember to start a line with \"Final Answer:\"
        to give me the final answer.\nBegin!"},{"role":"user","content":"Question:
        What is pi times the square root of the average high temperature in Austin
        TX in January?"},{"role":"assistant","content":"Thought:  We need to find
        the average high temperature in Austin TX in January and then multiply it
        by pi times the square root of that value. We can use a search engine to find
        the average high temperature in Austin TX in January. Once we have that value,
        we can use a calculator to perform the necessary calculations. \n\nAction:
        Search\nAction Input: \"average high temperature in Austin TX in January\"\nObservation:
        Daily high temperatures increase by 2°F, from 62°F to 64°F, rarely falling
        below 45°F or exceeding 76°F. The lowest daily average high temperature is
        61°F on ...\nThought:"}],"model":"gpt-3.5-turbo","temperature":0.2,"max_tokens":512,"stop":["\nObservation:
        "]}'
    headers:
      Content-Type:
      - application/json
      Authorization:
      - Bearer <openai_access_token>
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 30 Mar 2023 20:06:53 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - no-cache, must-revalidate
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - user-ri9zw9ahumb1bo9vs73mudbi
      Openai-Processing-Ms:
      - '1499'
      Openai-Version:
      - '2020-10-01'
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Request-Id:
      - dcaf5db6054e8058b0c6b88b585a7e1c
      Cf-Cache-Status:
      - DYNAMIC
      Server:
      - cloudflare
      Cf-Ray:
      - 7b02f9bce9ffa03e-SLC
      Alt-Svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        eyJpZCI6ImNoYXRjbXBsLTZ6c3BudDhSVmpMSE5DRUZ5cnF5Szludk80d0RRIiwib2JqZWN0IjoiY2hhdC5jb21wbGV0aW9uIiwiY3JlYXRlZCI6MTY4MDIwNjgxMSwibW9kZWwiOiJncHQtMy41LXR1cmJvLTAzMDEiLCJ1c2FnZSI6eyJwcm9tcHRfdG9rZW5zIjozNTcsImNvbXBsZXRpb25fdG9rZW5zIjo0NCwidG90YWxfdG9rZW5zIjo0MDF9LCJjaG9pY2VzIjpbeyJtZXNzYWdlIjp7InJvbGUiOiJhc3Npc3RhbnQiLCJjb250ZW50IjoiV2UgaGF2ZSBmb3VuZCB0aGUgYXZlcmFnZSBoaWdoIHRlbXBlcmF0dXJlIGluIEF1c3RpbiBUWCBpbiBKYW51YXJ5LCB3aGljaCBpcyA2NMKwRi4gTm93IHdlIGNhbiB1c2UgYSBjYWxjdWxhdG9yIHRvIHBlcmZvcm0gdGhlIG5lY2Vzc2FyeSBjYWxjdWxhdGlvbnMuXG5cbkFjdGlvbjogQ2FsY3VsYXRvclxuQWN0aW9uIElucHV0OiBwaSAqIHNxcnQoNjQpIn0sImZpbmlzaF9yZWFzb24iOiJzdG9wIiwiaW5kZXgiOjB9XX0K
  recorded_at: Thu, 30 Mar 2023 20:06:53 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"messages":[{"role":"system","content":"You can do basic math, but
        for any hard calculations that a human could not do in their head, use the
        following approach instead. Return code written in the Ruby programming language
        that prints the results. If anyone gives you a hard math problem, just use
        the following format and we’ll take care of the rest:\n${{Question with hard
        calculation.}}\nreply only with the following format:\n```ruby\n${{only Ruby
        code that prints the answer}}\n```\n```output\n${{Output of your code}}\n```\n\nOtherwise,
        you should use this simpler format:\n${{Question without hard calculation}}\nAnswer:
        ${{Answer}}\n\nDo not give an explanation of the answer and make sure your
        answer starts with either ''Answer:'' or ''```ruby''."},{"role":"system","content":"here
        is a hard example:\nthe user asks: What is 37593 * 67?\nyour answer: ```ruby\nputs(37593
        * 67)\n```\n```output\n2518731\n```\nAnswer: 2518731"},{"role":"system","content":"basic
        example:\nuser asks: What is 2518731 + 0?\nyou answer: Answer: 2518731"},{"role":"system","content":"Begin."},{"role":"user","content":"pi
        * sqrt(64)"}],"model":"gpt-3.5-turbo","temperature":0.2,"max_tokens":512,"stop":["```output"]}'
    headers:
      Content-Type:
      - application/json
      Authorization:
      - Bearer <openai_access_token>
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 30 Mar 2023 20:06:54 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - no-cache, must-revalidate
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - user-ri9zw9ahumb1bo9vs73mudbi
      Openai-Processing-Ms:
      - '863'
      Openai-Version:
      - '2020-10-01'
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Request-Id:
      - bced399e95976205f6c475bcb1eddc51
      Cf-Cache-Status:
      - DYNAMIC
      Server:
      - cloudflare
      Cf-Ray:
      - 7b02f9c7cea127d8-SLC
      Alt-Svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: '{"id":"chatcmpl-6zsppPlgb9wbw7OZjsPtiRyIrpKFn","object":"chat.completion","created":1680206813,"model":"gpt-3.5-turbo-0301","usage":{"prompt_tokens":262,"completion_tokens":15,"total_tokens":277},"choices":[{"message":{"role":"assistant","content":"```ruby\nputs(Math::PI
        * Math.sqrt(64))\n```\n"},"finish_reason":"stop","index":0}]}

        '
  recorded_at: Thu, 30 Mar 2023 20:06:54 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"messages":[{"role":"system","content":"Answer the following questions
        as best you can. You have access to the following actions:\nSearch: useful
        for when you need to answer questions about current events.You should ask
        targeted questions\nCalculator: useful for when you need to answer questions
        about math\nUse the following format:\nQuestion: the input question you must
        answer\nThought: you should always think about what to do\nAction: the action
        to take, should be one from this list: [Search, Calculator]\nAction Input:
        the input to the action\nObservation: the result of the action\n... (this
        Thought/Action/Action Input/Observation sequence can repeat N times)\nThought:
        I know the final answer\nFinal Answer: the final answer to the original input
        question\nNext Actions: Up to 3 logical suggested next questions for the user
        to ask after getting this answer.\nRemember to start a line with \"Final Answer:\"
        to give me the final answer.\nBegin!"},{"role":"user","content":"Question:
        What is pi times the square root of the average high temperature in Austin
        TX in January?"},{"role":"assistant","content":"Thought:  We need to find
        the average high temperature in Austin TX in January and then multiply it
        by pi times the square root of that value. We can use a search engine to find
        the average high temperature in Austin TX in January. Once we have that value,
        we can use a calculator to perform the necessary calculations. \n\nAction:
        Search\nAction Input: \"average high temperature in Austin TX in January\"\nObservation:
        Daily high temperatures increase by 2°F, from 62°F to 64°F, rarely falling
        below 45°F or exceeding 76°F. The lowest daily average high temperature is
        61°F on ...\nThought: We have found the average high temperature in Austin
        TX in January, which is 64°F. Now we can use a calculator to perform the necessary
        calculations.\n\nAction: Calculator\nAction Input: pi * sqrt(64)\nObservation:
        25.132741228718345\nThought:"}],"model":"gpt-3.5-turbo","temperature":0.2,"max_tokens":512,"stop":["\nObservation:
        "]}'
    headers:
      Content-Type:
      - application/json
      Authorization:
      - Bearer <openai_access_token>
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 30 Mar 2023 20:06:58 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - no-cache, must-revalidate
      Openai-Model:
      - gpt-3.5-turbo-0301
      Openai-Organization:
      - user-ri9zw9ahumb1bo9vs73mudbi
      Openai-Processing-Ms:
      - '3693'
      Openai-Version:
      - '2020-10-01'
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Request-Id:
      - 71dd2e7b167b0d5895bac5d0c9b91f03
      Cf-Cache-Status:
      - DYNAMIC
      Server:
      - cloudflare
      Cf-Ray:
      - 7b02f9d17b2527dc-SLC
      Alt-Svc:
      - h3=":443"; ma=86400, h3-29=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: '{"id":"chatcmpl-6zsprAStnG8ERCowjUEnsZhmTO8OQ","object":"chat.completion","created":1680206815,"model":"gpt-3.5-turbo-0301","usage":{"prompt_tokens":415,"completion_tokens":105,"total_tokens":520},"choices":[{"message":{"role":"assistant","content":"We
        have calculated the value of pi times the square root of the average high
        temperature in Austin TX in January, which is approximately 25.13.\n\nFinal
        Answer: Pi times the square root of the average high temperature in Austin
        TX in January is approximately 25.13.\n\nNext Actions:\n1. What is the average
        low temperature in Austin TX in January?\n2. What is the average temperature
        in Austin TX in July?\n3. How does the average high temperature in Austin
        TX in January compare to other cities in Texas?"},"finish_reason":"stop","index":0}]}

        '
  recorded_at: Thu, 30 Mar 2023 20:06:58 GMT
recorded_with: VCR 6.1.0
