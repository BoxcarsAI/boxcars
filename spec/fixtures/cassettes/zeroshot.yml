---
http_interactions:
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"messages":[{"role":"system","content":"Answer the following questions
        as best you can. You have access to the following actions:\nSearch: useful
        for when you need to answer questions about current events.You should ask
        targeted questions\nCalculator: useful for when you need to answer questions
        about math\nUse the following format:\nQuestion: the input question you must
        answer\nThought: you should always think about what to do\nAction: the action
        to take, should be one from this list: [Search, Calculator]\nAction Input:
        an input question to the action\nObservation: the result of the action\n...
        (this Thought/Action/Action Input/Observation sequence can repeat N times)\nThought:
        I know the final answer\nFinal Answer: the final answer to the original input
        question\n\nRemember to start a line with \"Final Answer:\" to give me the
        final answer.\nAlso make sure to specify a question for the Action Input.\nFinally,
        if you can deduct the answer from the question or observation, you can start
        with \"Final Answer:\" and give me the answer.\nBegin!"},{"role":"user","content":"Question:
        What is pi times the square root of the average high temperature in Austin
        TX in January?"},{"role":"assistant","content":"Thought: "}],"model":"gpt-3.5-turbo","temperature":0.2,"max_tokens":512,"stop":["\nObservation:
        "]}'
    headers:
      Content-Type:
      - application/json
      Authorization:
      - Bearer <openai_access_token>
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Sat, 01 Jul 2023 00:04:16 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - no-cache, must-revalidate
      Openai-Model:
      - gpt-3.5-turbo-0613
      Openai-Organization:
      - user-ri9zw9ahumb1bo9vs73mudbi
      Openai-Processing-Ms:
      - '1948'
      Openai-Version:
      - '2020-10-01'
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89209'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 527ms
      X-Request-Id:
      - 2b52440e1f708a7b56240b81f97354a2
      Cf-Cache-Status:
      - DYNAMIC
      Server:
      - cloudflare
      Cf-Ray:
      - 7dfa63f858ea1b2d-PHX
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-7XINzLHUk5hdSh6asnXKlYPk2HRVP",
          "object": "chat.completion",
          "created": 1688169855,
          "model": "gpt-3.5-turbo-0613",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "To answer this question, I need to find the average high temperature in Austin, TX in January and then multiply it by pi. I can use the Search action to find the average high temperature in Austin, TX in January."
              },
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 247,
            "completion_tokens": 45,
            "total_tokens": 292
          }
        }
  recorded_at: Sat, 01 Jul 2023 00:04:16 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"messages":[{"role":"system","content":"Answer the following questions
        as best you can. You have access to the following actions:\nSearch: useful
        for when you need to answer questions about current events.You should ask
        targeted questions\nCalculator: useful for when you need to answer questions
        about math\nUse the following format:\nQuestion: the input question you must
        answer\nThought: you should always think about what to do\nAction: the action
        to take, should be one from this list: [Search, Calculator]\nAction Input:
        an input question to the action\nObservation: the result of the action\n...
        (this Thought/Action/Action Input/Observation sequence can repeat N times)\nThought:
        I know the final answer\nFinal Answer: the final answer to the original input
        question\n\nRemember to start a line with \"Final Answer:\" to give me the
        final answer.\nAlso make sure to specify a question for the Action Input.\nFinally,
        if you can deduct the answer from the question or observation, you can start
        with \"Final Answer:\" and give me the answer.\nBegin!"},{"role":"user","content":"Question:
        What is pi times the square root of the average high temperature in Austin
        TX in January?"},{"role":"assistant","content":"Thought:  To answer this question,
        I need to find the average high temperature in Austin, TX in January and then
        multiply it by pi. I can use the Search action to find the average high temperature
        in Austin, TX in January.\nObservation: To answer this question, I need to
        find the average high temperature in Austin, TX in January and then multiply
        it by pi. I can use the Search action to find the average high temperature
        in Austin, TX in January.\nThought:"}],"model":"gpt-3.5-turbo","temperature":0.2,"max_tokens":512,"stop":["\nObservation:
        "]}'
    headers:
      Content-Type:
      - application/json
      Authorization:
      - Bearer <openai_access_token>
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Sat, 01 Jul 2023 00:04:18 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - no-cache, must-revalidate
      Openai-Model:
      - gpt-3.5-turbo-0613
      Openai-Organization:
      - user-ri9zw9ahumb1bo9vs73mudbi
      Openai-Processing-Ms:
      - '1242'
      Openai-Version:
      - '2020-10-01'
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89097'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 602ms
      X-Request-Id:
      - 687f4a25a38f0452ff5c776687676d47
      Cf-Cache-Status:
      - DYNAMIC
      Server:
      - cloudflare
      Cf-Ray:
      - 7dfa6405de8c1b0f-PHX
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-7XIO17FWupoT9tmNhyvXdqhSeOUKG",
          "object": "chat.completion",
          "created": 1688169857,
          "model": "gpt-3.5-turbo-0613",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "Action: Search\nAction Input: \"average high temperature in Austin TX in January\""
              },
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 342,
            "completion_tokens": 17,
            "total_tokens": 359
          }
        }
  recorded_at: Sat, 01 Jul 2023 00:04:18 GMT
- request:
    method: get
    uri: https://serpapi.com/search?api_key=<SERPAPI_API_KEY>&engine=google&output=json&q=average%20high%20temperature%20in%20Austin%20TX%20in%20January&source=ruby
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Sat, 01 Jul 2023 00:04:18 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Cf-Ray:
      - 7dfa640f0c33a712-PHX
      Cf-Cache-Status:
      - HIT
      Age:
      - '135'
      Cache-Control:
      - max-age=3600, public
      Etag:
      - W/"f1a00ed5f64894ef0fae863bd6c6e318"
      Vary:
      - Accept-Encoding
      Referrer-Policy:
      - strict-origin-when-cross-origin
      Serpapi-Search-Id:
      - 649f6cf8e0ded4e69c0ee63e
      X-Content-Type-Options:
      - nosniff
      X-Download-Options:
      - noopen
      X-Frame-Options:
      - SAMEORIGIN
      X-Permitted-Cross-Domain-Policies:
      - none
      X-Request-Id:
      - 5dd558f3-ad1b-4942-afe0-d083778000f9
      X-Robots-Tag:
      - noindex, nofollow
      X-Runtime:
      - '2.824452'
      X-Xss-Protection:
      - 1; mode=block
      Server:
      - cloudflare
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Sat, 01 Jul 2023 00:04:18 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"messages":[{"role":"system","content":"Answer the following questions
        as best you can. You have access to the following actions:\nSearch: useful
        for when you need to answer questions about current events.You should ask
        targeted questions\nCalculator: useful for when you need to answer questions
        about math\nUse the following format:\nQuestion: the input question you must
        answer\nThought: you should always think about what to do\nAction: the action
        to take, should be one from this list: [Search, Calculator]\nAction Input:
        an input question to the action\nObservation: the result of the action\n...
        (this Thought/Action/Action Input/Observation sequence can repeat N times)\nThought:
        I know the final answer\nFinal Answer: the final answer to the original input
        question\n\nRemember to start a line with \"Final Answer:\" to give me the
        final answer.\nAlso make sure to specify a question for the Action Input.\nFinally,
        if you can deduct the answer from the question or observation, you can start
        with \"Final Answer:\" and give me the answer.\nBegin!"},{"role":"user","content":"Question:
        What is pi times the square root of the average high temperature in Austin
        TX in January?"},{"role":"assistant","content":"Thought:  To answer this question,
        I need to find the average high temperature in Austin, TX in January and then
        multiply it by pi. I can use the Search action to find the average high temperature
        in Austin, TX in January.\nObservation: To answer this question, I need to
        find the average high temperature in Austin, TX in January and then multiply
        it by pi. I can use the Search action to find the average high temperature
        in Austin, TX in January.\nThought: Action: Search\nAction Input: \"average
        high temperature in Austin TX in January\"\nObservation: {:snippet=\u003e\"January
        Weather in Austin Texas, United States. Daily high temperatures increase by
        2°F, from 62°F to 64°F, rarely falling below 45°F or exceeding 76° ...\",
        :url=\u003e\"https://weatherspark.com/m/8004/1/Average-Weather-in-January-in-Austin-Texas-United-States\"}\nThought:"}],"model":"gpt-3.5-turbo","temperature":0.2,"max_tokens":512,"stop":["\nObservation:
        "]}'
    headers:
      Content-Type:
      - application/json
      Authorization:
      - Bearer <openai_access_token>
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Sat, 01 Jul 2023 00:04:21 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - no-cache, must-revalidate
      Openai-Model:
      - gpt-3.5-turbo-0613
      Openai-Organization:
      - user-ri9zw9ahumb1bo9vs73mudbi
      Openai-Processing-Ms:
      - '2465'
      Openai-Version:
      - '2020-10-01'
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89003'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 664ms
      X-Request-Id:
      - ed1fe97d4411050e0a390c62b3ad4626
      Cf-Cache-Status:
      - DYNAMIC
      Server:
      - cloudflare
      Cf-Ray:
      - 7dfa640f8c2d1b0f-PHX
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJpZCI6ICJjaGF0Y21wbC03WElPM1BNZ0ljSnN2ZUFoY1F0dTJnVDh2dEpCYiIsCiAgIm9iamVjdCI6ICJjaGF0LmNvbXBsZXRpb24iLAogICJjcmVhdGVkIjogMTY4ODE2OTg1OSwKICAibW9kZWwiOiAiZ3B0LTMuNS10dXJiby0wNjEzIiwKICAiY2hvaWNlcyI6IFsKICAgIHsKICAgICAgImluZGV4IjogMCwKICAgICAgIm1lc3NhZ2UiOiB7CiAgICAgICAgInJvbGUiOiAiYXNzaXN0YW50IiwKICAgICAgICAiY29udGVudCI6ICJGaW5hbCBBbnN3ZXI6IFRoZSBhdmVyYWdlIGhpZ2ggdGVtcGVyYXR1cmUgaW4gQXVzdGluLCBUWCBpbiBKYW51YXJ5IGlzIDY0wrBGLiBUaGVyZWZvcmUsIHBpIHRpbWVzIHRoZSBzcXVhcmUgcm9vdCBvZiB0aGUgYXZlcmFnZSBoaWdoIHRlbXBlcmF0dXJlIGluIEF1c3RpbiwgVFggaW4gSmFudWFyeSBpcyBhcHByb3hpbWF0ZWx5IDMuMTQgKiBzcXJ0KDY0KSA9IDMuMTQgKiA4ID0gMjUuMTIuIgogICAgICB9LAogICAgICAiZmluaXNoX3JlYXNvbiI6ICJzdG9wIgogICAgfQogIF0sCiAgInVzYWdlIjogewogICAgInByb21wdF90b2tlbnMiOiA0MzksCiAgICAiY29tcGxldGlvbl90b2tlbnMiOiA2MSwKICAgICJ0b3RhbF90b2tlbnMiOiA1MDAKICB9Cn0K
  recorded_at: Sat, 01 Jul 2023 00:04:21 GMT
recorded_with: VCR 6.1.0
