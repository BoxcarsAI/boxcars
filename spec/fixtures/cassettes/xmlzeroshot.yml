---
http_interactions:
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"messages":[{"role":"system","content":"\u003ctraining\u003eAnswer
        the following questions as best you can. You have access to the following
        tools for actions:\n\u003cboxcars\u003e\n\u003ctool name=\"Search\" description=\"useful
        for when you need to answer questions about current events.You should ask
        targeted questions\"\u003e\n  \u003cparams\u003e\n    \u003cparam name=\"question\"
        data-type=\"string\" required=\"true\" description=\"the input question\"
        /\u003e\n  \u003c/params\u003e\n\u003c/tool\u003e\n\n\u003ctool name=\"Calculator\"
        description=\"useful for when you need to answer questions about math\"\u003e\n  \u003cparams\u003e\n    \u003cparam
        name=\"question\" data-type=\"string\" required=\"true\" description=\"the
        input question\" /\u003e\n  \u003c/params\u003e\n\u003c/tool\u003e\n\u003c/boxcars\u003eUse
        the following format making sure all open tags have closing tags:\n \u003cquestion\u003ethe
        input question you must answer\u003c/question\u003e\n \u003cthought\u003eyou
        should always think about what to do\u003c/thought\u003e\n \u003caction\u003ethe
        action to take, from this action list above\u003c/action\u003e\n \u003caction_input\u003einput
        to the action\u003c/action_input\u003e\n \u003cobservation\u003ethe result
        of the action\u003c/observation\u003e\n ... (this thought/action/action_input/observation
        sequence repeats until you know the final answer) ...\n \u003cthought\u003eI
        know the final answer\u003c/thought\u003e\n \u003cfinal_answer\u003ethe final
        answer to the original input question\u003c/final_answer\u003e\n-- FORMAT
        END -\nYour answer should always have begin and end tags for each element.\nAlso
        make sure to specify arguments for the action_input.\nFinally, if you can
        deduct the answer from the question or observations, you can jump to final_answer
        and give me the answer.\n\u003c/training\u003e"},{"role":"user","content":"\u003cquestion\u003eWhat
        is pi times the square root of the average high temperature in Austin TX in
        January?\u003c/question\u003e"},{"role":"assistant","content":""}],"model":"gpt-3.5-turbo","temperature":0.2,"max_tokens":512,"stop":["\n\u003cobservation\u003e"]}'
    headers:
      Content-Type:
      - application/json
      Authorization:
      - Bearer <openai_access_token>
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Tue, 25 Jul 2023 13:24:43 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - no-cache, must-revalidate
      Openai-Model:
      - gpt-3.5-turbo-0613
      Openai-Organization:
      - user-ri9zw9ahumb1bo9vs73mudbi
      Openai-Processing-Ms:
      - '1454'
      Openai-Version:
      - '2020-10-01'
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89086'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 608ms
      X-Request-Id:
      - 06cc1b26d07561d44a5ab608fe41d30a
      Cf-Cache-Status:
      - DYNAMIC
      Server:
      - cloudflare
      Cf-Ray:
      - 7ec4b9809b7da718-PHX
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-7gCJlx2zTqYZnBSCKgXr0yTTBgns9",
          "object": "chat.completion",
          "created": 1690291481,
          "model": "gpt-3.5-turbo-0613",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "<thought>I need to find the average high temperature in Austin TX in January.</thought>\n<action>Search</action>\n<action_input>average high temperature in Austin TX in January</action_input>"
              },
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 362,
            "completion_tokens": 41,
            "total_tokens": 403
          }
        }
  recorded_at: Tue, 25 Jul 2023 13:24:43 GMT
- request:
    method: get
    uri: https://serpapi.com/search?api_key=<SERPAPI_API_KEY>&engine=google&output=json&q=average%20high%20temperature%20in%20Austin%20TX%20in%20January&source=ruby
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Tue, 25 Jul 2023 13:24:43 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Cf-Ray:
      - 7ec4b98b5b341b0a-PHX
      Cf-Cache-Status:
      - HIT
      Age:
      - '294'
      Cache-Control:
      - max-age=3600, public
      Etag:
      - W/"2bbcdcd2f4e683a6b43135ee22a21bc6"
      Vary:
      - Accept-Encoding
      Referrer-Policy:
      - strict-origin-when-cross-origin
      Serpapi-Search-Id:
      - 64bfcbf4ce87f80a89549f94
      X-Content-Type-Options:
      - nosniff
      X-Download-Options:
      - noopen
      X-Frame-Options:
      - SAMEORIGIN
      X-Permitted-Cross-Domain-Policies:
      - none
      X-Request-Id:
      - 24d441d8-2e52-44a1-b8a3-1a5693470a4b
      X-Robots-Tag:
      - noindex, nofollow
      X-Runtime:
      - '1.164851'
      X-Xss-Protection:
      - 1; mode=block
      Server:
      - cloudflare
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Tue, 25 Jul 2023 13:24:43 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"messages":[{"role":"system","content":"\u003ctraining\u003eAnswer
        the following questions as best you can. You have access to the following
        tools for actions:\n\u003cboxcars\u003e\n\u003ctool name=\"Search\" description=\"useful
        for when you need to answer questions about current events.You should ask
        targeted questions\"\u003e\n  \u003cparams\u003e\n    \u003cparam name=\"question\"
        data-type=\"string\" required=\"true\" description=\"the input question\"
        /\u003e\n  \u003c/params\u003e\n\u003c/tool\u003e\n\n\u003ctool name=\"Calculator\"
        description=\"useful for when you need to answer questions about math\"\u003e\n  \u003cparams\u003e\n    \u003cparam
        name=\"question\" data-type=\"string\" required=\"true\" description=\"the
        input question\" /\u003e\n  \u003c/params\u003e\n\u003c/tool\u003e\n\u003c/boxcars\u003eUse
        the following format making sure all open tags have closing tags:\n \u003cquestion\u003ethe
        input question you must answer\u003c/question\u003e\n \u003cthought\u003eyou
        should always think about what to do\u003c/thought\u003e\n \u003caction\u003ethe
        action to take, from this action list above\u003c/action\u003e\n \u003caction_input\u003einput
        to the action\u003c/action_input\u003e\n \u003cobservation\u003ethe result
        of the action\u003c/observation\u003e\n ... (this thought/action/action_input/observation
        sequence repeats until you know the final answer) ...\n \u003cthought\u003eI
        know the final answer\u003c/thought\u003e\n \u003cfinal_answer\u003ethe final
        answer to the original input question\u003c/final_answer\u003e\n-- FORMAT
        END -\nYour answer should always have begin and end tags for each element.\nAlso
        make sure to specify arguments for the action_input.\nFinally, if you can
        deduct the answer from the question or observations, you can jump to final_answer
        and give me the answer.\n\u003c/training\u003e"},{"role":"user","content":"\u003cquestion\u003eWhat
        is pi times the square root of the average high temperature in Austin TX in
        January?\u003c/question\u003e"},{"role":"assistant","content":" \u003cthought\u003eI
        need to find the average high temperature in Austin TX in January.\u003c/thought\u003e\n\u003caction\u003eSearch\u003c/action\u003e\n\u003caction_input\u003eaverage
        high temperature in Austin TX in January\u003c/action_input\u003e\n\u003cobservation\u003e{:snippet=\u003e\"January
        Weather in Austin Texas, United States. Daily high temperatures increase by
        2°F, from 62°F to 64°F, rarely falling below 45°F or exceeding 76° ...\",
        :url=\u003e\"https://weatherspark.com/m/8004/1/Average-Weather-in-January-in-Austin-Texas-United-States\"}\u003c/observation\u003e\n"}],"model":"gpt-3.5-turbo","temperature":0.2,"max_tokens":512,"stop":["\n\u003cobservation\u003e"]}'
    headers:
      Content-Type:
      - application/json
      Authorization:
      - Bearer <openai_access_token>
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Tue, 25 Jul 2023 13:24:46 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - no-cache, must-revalidate
      Openai-Model:
      - gpt-3.5-turbo-0613
      Openai-Organization:
      - user-ri9zw9ahumb1bo9vs73mudbi
      Openai-Processing-Ms:
      - '2408'
      Openai-Version:
      - '2020-10-01'
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '88963'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 690ms
      X-Request-Id:
      - 0c18027a3808a24a5ce012b92a731e9e
      Cf-Cache-Status:
      - DYNAMIC
      Server:
      - cloudflare
      Cf-Ray:
      - 7ec4b98bfdd2a703-PHX
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJpZCI6ICJjaGF0Y21wbC03Z0NKbkFBQ3J0aVBMbGpEeDJXV0plUE05YndQVyIsCiAgIm9iamVjdCI6ICJjaGF0LmNvbXBsZXRpb24iLAogICJjcmVhdGVkIjogMTY5MDI5MTQ4MywKICAibW9kZWwiOiAiZ3B0LTMuNS10dXJiby0wNjEzIiwKICAiY2hvaWNlcyI6IFsKICAgIHsKICAgICAgImluZGV4IjogMCwKICAgICAgIm1lc3NhZ2UiOiB7CiAgICAgICAgInJvbGUiOiAiYXNzaXN0YW50IiwKICAgICAgICAiY29udGVudCI6ICI8dGhvdWdodD5JIGhhdmUgZm91bmQgdGhhdCB0aGUgYXZlcmFnZSBoaWdoIHRlbXBlcmF0dXJlIGluIEF1c3RpbiBUWCBpbiBKYW51YXJ5IGlzIDY0wrBGLjwvdGhvdWdodD5cbjx0aG91Z2h0Pk5vdyBJIG5lZWQgdG8gY2FsY3VsYXRlIHBpIHRpbWVzIHRoZSBzcXVhcmUgcm9vdCBvZiA2NC48L3Rob3VnaHQ+XG48YWN0aW9uPkNhbGN1bGF0b3I8L2FjdGlvbj5cbjxhY3Rpb25faW5wdXQ+cGkgKiBzcXJ0KDY0KTwvYWN0aW9uX2lucHV0PiIKICAgICAgfSwKICAgICAgImZpbmlzaF9yZWFzb24iOiAic3RvcCIKICAgIH0KICBdLAogICJ1c2FnZSI6IHsKICAgICJwcm9tcHRfdG9rZW5zIjogNDg0LAogICAgImNvbXBsZXRpb25fdG9rZW5zIjogNjEsCiAgICAidG90YWxfdG9rZW5zIjogNTQ1CiAgfQp9Cg==
  recorded_at: Tue, 25 Jul 2023 13:24:45 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"messages":[{"role":"system","content":"You can do basic math, but
        for any hard calculations that a human could not do in their head, use the
        following approach instead. Return code written in the Ruby programming language
        that prints the results to the console. If anyone gives you a hard math problem,
        just use the following format and we’ll take care of the rest:\n${{Question
        with hard calculation.}}\nreply only with the following format:\n```ruby\n${{only
        Ruby code that prints the answer}}\n```\n```output\n${{Output of your code}}\n```\n\nOtherwise,
        you should use this simpler format:\n${{Question without hard calculation}}\nAnswer:
        ${{Answer}}\n\nDo not give an explanation of the answer and make sure your
        answer starts with either ''Answer:'' or ''```ruby''."},{"role":"system","content":"here
        is a hard example:\nthe user asks: What is 37593 * 67?\nyour answer: ```ruby\nputs(37593
        * 67)\n```\n```output\n2518731\n```\nAnswer: 2518731"},{"role":"system","content":"basic
        example:\nuser asks: What is 2518731 + 0?\nyou answer: Answer: 2518731"},{"role":"system","content":"Begin."},{"role":"user","content":"pi
        * sqrt(64)"}],"model":"gpt-3.5-turbo","temperature":0.2,"max_tokens":512,"stop":["```output"]}'
    headers:
      Content-Type:
      - application/json
      Authorization:
      - Bearer <openai_access_token>
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Tue, 25 Jul 2023 13:24:47 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - no-cache, must-revalidate
      Openai-Model:
      - gpt-3.5-turbo-0613
      Openai-Organization:
      - user-ri9zw9ahumb1bo9vs73mudbi
      Openai-Processing-Ms:
      - '1044'
      Openai-Version:
      - '2020-10-01'
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '89245'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 502ms
      X-Request-Id:
      - dacf9d52370cce69149ff187cac71115
      Cf-Cache-Status:
      - DYNAMIC
      Server:
      - cloudflare
      Cf-Ray:
      - 7ec4b99c29801b0a-PHX
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-7gCJqHhk3vwlhDvztcuVYjItTH0Sx",
          "object": "chat.completion",
          "created": 1690291486,
          "model": "gpt-3.5-turbo-0613",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "```ruby\nputs Math::PI * Math.sqrt(64)\n```\n"
              },
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 260,
            "completion_tokens": 15,
            "total_tokens": 275
          }
        }
  recorded_at: Tue, 25 Jul 2023 13:24:47 GMT
- request:
    method: post
    uri: https://api.openai.com/v1/chat/completions
    body:
      encoding: UTF-8
      string: '{"messages":[{"role":"system","content":"\u003ctraining\u003eAnswer
        the following questions as best you can. You have access to the following
        tools for actions:\n\u003cboxcars\u003e\n\u003ctool name=\"Search\" description=\"useful
        for when you need to answer questions about current events.You should ask
        targeted questions\"\u003e\n  \u003cparams\u003e\n    \u003cparam name=\"question\"
        data-type=\"string\" required=\"true\" description=\"the input question\"
        /\u003e\n  \u003c/params\u003e\n\u003c/tool\u003e\n\n\u003ctool name=\"Calculator\"
        description=\"useful for when you need to answer questions about math\"\u003e\n  \u003cparams\u003e\n    \u003cparam
        name=\"question\" data-type=\"string\" required=\"true\" description=\"the
        input question\" /\u003e\n  \u003c/params\u003e\n\u003c/tool\u003e\n\u003c/boxcars\u003eUse
        the following format making sure all open tags have closing tags:\n \u003cquestion\u003ethe
        input question you must answer\u003c/question\u003e\n \u003cthought\u003eyou
        should always think about what to do\u003c/thought\u003e\n \u003caction\u003ethe
        action to take, from this action list above\u003c/action\u003e\n \u003caction_input\u003einput
        to the action\u003c/action_input\u003e\n \u003cobservation\u003ethe result
        of the action\u003c/observation\u003e\n ... (this thought/action/action_input/observation
        sequence repeats until you know the final answer) ...\n \u003cthought\u003eI
        know the final answer\u003c/thought\u003e\n \u003cfinal_answer\u003ethe final
        answer to the original input question\u003c/final_answer\u003e\n-- FORMAT
        END -\nYour answer should always have begin and end tags for each element.\nAlso
        make sure to specify arguments for the action_input.\nFinally, if you can
        deduct the answer from the question or observations, you can jump to final_answer
        and give me the answer.\n\u003c/training\u003e"},{"role":"user","content":"\u003cquestion\u003eWhat
        is pi times the square root of the average high temperature in Austin TX in
        January?\u003c/question\u003e"},{"role":"assistant","content":" \u003cthought\u003eI
        need to find the average high temperature in Austin TX in January.\u003c/thought\u003e\n\u003caction\u003eSearch\u003c/action\u003e\n\u003caction_input\u003eaverage
        high temperature in Austin TX in January\u003c/action_input\u003e\n\u003cobservation\u003e{:snippet=\u003e\"January
        Weather in Austin Texas, United States. Daily high temperatures increase by
        2°F, from 62°F to 64°F, rarely falling below 45°F or exceeding 76° ...\",
        :url=\u003e\"https://weatherspark.com/m/8004/1/Average-Weather-in-January-in-Austin-Texas-United-States\"}\u003c/observation\u003e\n
        \u003cthought\u003eI have found that the average high temperature in Austin
        TX in January is 64°F.\u003c/thought\u003e\n\u003cthought\u003eNow I need
        to calculate pi times the square root of 64.\u003c/thought\u003e\n\u003caction\u003eCalculator\u003c/action\u003e\n\u003caction_input\u003epi
        * sqrt(64)\u003c/action_input\u003e\n\u003cobservation\u003e25.132741228718345\u003c/observation\u003e\n"}],"model":"gpt-3.5-turbo","temperature":0.2,"max_tokens":512,"stop":["\n\u003cobservation\u003e"]}'
    headers:
      Content-Type:
      - application/json
      Authorization:
      - Bearer <openai_access_token>
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Tue, 25 Jul 2023 13:24:49 GMT
      Content-Type:
      - application/json
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Access-Control-Allow-Origin:
      - "*"
      Cache-Control:
      - no-cache, must-revalidate
      Openai-Model:
      - gpt-3.5-turbo-0613
      Openai-Organization:
      - user-ri9zw9ahumb1bo9vs73mudbi
      Openai-Processing-Ms:
      - '1330'
      Openai-Version:
      - '2020-10-01'
      Strict-Transport-Security:
      - max-age=15724800; includeSubDomains
      X-Ratelimit-Limit-Requests:
      - '3500'
      X-Ratelimit-Limit-Tokens:
      - '90000'
      X-Ratelimit-Remaining-Requests:
      - '3499'
      X-Ratelimit-Remaining-Tokens:
      - '88890'
      X-Ratelimit-Reset-Requests:
      - 17ms
      X-Ratelimit-Reset-Tokens:
      - 740ms
      X-Request-Id:
      - 0b174358d67028fae63348ab3082b202
      Cf-Cache-Status:
      - DYNAMIC
      Server:
      - cloudflare
      Cf-Ray:
      - 7ec4b9a60d1ca6f1-PHX
      Alt-Svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "id": "chatcmpl-7gCJrAEZQG1absbSE6VoHNr4AoGo0",
          "object": "chat.completion",
          "created": 1690291487,
          "model": "gpt-3.5-turbo-0613",
          "choices": [
            {
              "index": 0,
              "message": {
                "role": "assistant",
                "content": "<thought>I have calculated that pi times the square root of the average high temperature in Austin TX in January is approximately 25.132741228718345.</thought>\n<final_answer>Approximately 25.132741228718345</final_answer>"
              },
              "finish_reason": "stop"
            }
          ],
          "usage": {
            "prompt_tokens": 558,
            "completion_tokens": 52,
            "total_tokens": 610
          }
        }
  recorded_at: Tue, 25 Jul 2023 13:24:49 GMT
recorded_with: VCR 6.1.0
